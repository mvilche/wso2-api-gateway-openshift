    ##comienzo Template
  apiVersion: v1
  kind: Template
  metadata:
    name: gateway-openshift-mvilche
    labels:
      template: management-api-openshift-mvilche
      autor: "Martin_Fabrizzio_Vilche"
    annotations:
      openshift.io/display-name: "management-api-openshift-mvilche"
      iconClass: "icon-github"
      description: >-
        management-api api gateway INTEGRACION OPENSHIFT
        Martin Fabrizzio Vilche.
        https://github.com/mvilche.

  objects:



########## gateway



  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      finalizers:
      - kubernetes.io/pvc-protection
      name: wso2-api-gateway-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi


          
  - apiVersion: v1
    data:
      deployment.toml: |-
        [server]
        hostname = "${URL}"
        node_ip = "127.0.0.1"
        #offset=0
        mode = "single" #single or ha
        base_path = "https://${URL}"
        #discard_empty_caches = false
        server_role = "default"

        [super_admin]
        username = "admin"
        password = "admin"
        create_admin_account = true

        [user_store]
        type = "database"

        [database.apim_db]
        type = "h2"
        url = "jdbc:h2:./repository/database/WSO2AM_DB;AUTO_SERVER=TRUE;DB_CLOSE_ON_EXIT=FALSE"
        username = "wso2carbon"
        password = "wso2carbon"

        [database.shared_db]
        type = "h2"
        url = "jdbc:h2:./repository/database/WSO2SHARED_DB;DB_CLOSE_ON_EXIT=FALSE"
        username = "wso2carbon"
        password = "wso2carbon"

        [keystore.tls]
        file_name =  "wso2carbon.jks"
        type =  "JKS"
        password =  "wso2carbon"
        alias =  "wso2carbon"
        key_password =  "wso2carbon"

        [[apim.gateway.environment]]
        name = "Production and Sandbox"
        type = "hybrid"
        display_in_api_console = true
        description = "This is a hybrid gateway that handles both production and sandbox token traffic."
        show_as_token_endpoint_url = true
        service_url = "https://${URL}/services/"
        username= "${admin.username}"
        password= "${admin.password}"
        ws_endpoint = "ws://localhost:9099"
        wss_endpoint = "wss://localhost:8099"
        http_endpoint = "http://localhost:${http.nio.port}"
        https_endpoint = "https://localhost:${https.nio.port}"

        #[apim.cache.gateway_token]
        #enable = true
        #expiry_time = "900s"

        #[apim.cache.resource]
        #enable = true
        #expiry_time = "900s"

        #[apim.cache.km_token]
        #enable = false
        #expiry_time = "15m"

        #[apim.cache.recent_apis]
        #enable = false

        #[apim.cache.scopes]
        #enable = true

        #[apim.cache.publisher_roles]
        #enable = true

        #[apim.cache.jwt_claim]
        #enable = true
        #expiry_time = "15m"

        #[apim.cache.tags]
        #expiry_time = "2m"

        #[apim.analytics]
        #enable = false
        #store_api_url = "https://localhost:7444"
        #username = "$ref{super_admin.username}"
        #password = "$ref{super_admin.password}"
        #event_publisher_type = "default"
        #event_publisher_impl = "org.wso2.carbon.apimgt.usage.publisher.APIMgtUsageDataBridgeDataPublisher"
        #publish_response_size = true

        #[[apim.analytics.url_group]]
        #analytics_url =["tcp://analytics1:7611","tcp://analytics2:7611"]
        #analytics_auth_url =["ssl://analytics1:7711","ssl://analytics2:7711"]
        #type = "loadbalance"

        #[[apim.analytics.url_group]]
        #analytics_url =["tcp://analytics1:7612","tcp://analytics2:7612"]
        #analytics_auth_url =["ssl://analytics1:7712","ssl://analytics2:7712"]
        #type = "failover"

        [apim.key_manager]
        service_url = "https://${URL}/services/"
        #username = "$ref{super_admin.username}"
        #password = "$ref{super_admin.password}"
        #pool.init_idle_capacity = 50
        #pool.max_idle = 100
        #key_validation_handler_type = "default"
        #key_validation_handler_type = "custom"
        #key_validation_handler_impl = "org.wso2.carbon.apimgt.keymgt.handlers.DefaultKeyValidationHandler"

        #[apim.jwt]
        #enable = true
        #encoding = "base64" # base64,base64url
        #generator_impl = "org.wso2.carbon.apimgt.keymgt.token.JWTGenerator"
        #claim_dialect = "http://wso2.org/claims"
        #header = "X-JWT-Assertion"
        #signing_algorithm = "SHA256withRSA"
        #enable_user_claims = true
        #claims_extractor_impl = "org.wso2.carbon.apimgt.impl.token.DefaultClaimsRetriever"

        #[apim.oauth_config]
        #enable_outbound_auth_header = false
        #auth_header = "Authorization"
        #revoke_endpoint = "https://localhost:${https.nio.port}/revoke"
        #enable_token_encryption = false
        #enable_token_hashing = false

        [apim.devportal]
        url = "https://${URL}/devportal"
        #enable_application_sharing = false
        #if application_sharing_type, application_sharing_impl both defined priority goes to application_sharing_impl
        #application_sharing_type = "default" #changed type, saml, default #todo: check the new config for rest api
        #application_sharing_impl = "org.wso2.carbon.apimgt.impl.SAMLGroupIDExtractorImpl"
        #display_multiple_versions = false
        #display_deprecated_apis = false
        #enable_comments = true
        #enable_ratings = true
        #enable_forum = true

        [apim.cors]
        allow_origins = "*"
        allow_methods = ["GET","PUT","POST","DELETE","PATCH","OPTIONS"]
        allow_headers = ["authorization","Access-Control-Allow-Origin","Content-Type","SOAPAction"]
        allow_credentials = false

        #[apim.throttling]
        #enable_data_publishing = true
        #enable_policy_deploy = true
        #enable_blacklist_condition = true
        #enable_persistence = true
        #throttle_decision_endpoints = ["tcp://localhost:5672","tcp://localhost:5672"]

        #[apim.throttling.blacklist_condition]
        #start_delay = "5m"
        #period = "1h"

        #[apim.throttling.jms]
        #start_delay = "5m"

        #[apim.throttling.event_sync]
        #hostName = "0.0.0.0"
        #port = 11224

        #[apim.throttling.event_management]
        #hostName = "0.0.0.0"
        #port = 10005

        #[[apim.throttling.url_group]]
        #traffic_manager_urls = ["tcp://localhost:9611","tcp://localhost:9611"]
        #traffic_manager_auth_urls = ["ssl://localhost:9711","ssl://localhost:9711"]
        #type = "loadbalance"

        #[[apim.throttling.url_group]]
        #traffic_manager_urls = ["tcp://localhost:9611","tcp://localhost:9611"]
        #traffic_manager_auth_urls = ["ssl://localhost:9711","ssl://localhost:9711"]
        #type = "failover"

        #[apim.workflow]
        #enable = false
        #service_url = "https://localhost:9445/bpmn"
        #username = "$ref{super_admin.username}"
        #password = "$ref{super_admin.password}"
        #callback_endpoint = "https://localhost:${mgt.transport.https.port}/api/am/admin/v0.15/workflows/update-workflow-status"
        #token_endpoint = "https://localhost:${https.nio.port}/token"
        #client_registration_endpoint = "https://localhost:${mgt.transport.https.port}/client-registration/v0.15/register"
        #client_registration_username = "$ref{super_admin.username}"
        #client_registration_password = "$ref{super_admin.password}"

        #data bridge config
        #[transport.receiver]
        #type = "binary"
        #worker_threads = 10
        #session_timeout = "30m"
        #keystore.file_name = "$ref{keystore.tls.file_name}"
        #keystore.password = "$ref{keystore.tls.password}"
        #tcp_port = 9611
        #ssl_port = 9711
        #ssl_receiver_thread_pool_size = 100
        #tcp_receiver_thread_pool_size = 100
        #ssl_enabled_protocols = ["TLSv1","TLSv1.1","TLSv1.2"]
        #ciphers = ["SSL_RSA_WITH_RC4_128_MD5","SSL_RSA_WITH_RC4_128_SHA"]

        #[apim.notification]
        #from_address = "APIM.com"
        #username = "APIM"
        #password = "APIM+123"
        #hostname = "localhost"
        #port = 3025
        #enable_start_tls = false
        #enable_authentication = true

        #[apim.token.revocation]
        #notifier_impl = "org.wso2.carbon.apimgt.keymgt.events.TokenRevocationNotifierImpl"
        #enable_realtime_notifier = true
        #realtime_notifier.ttl = 5000
        #enable_persistent_notifier = true
        #persistent_notifier.hostname = "https://localhost:2379/v2/keys/jti/"
        #persistent_notifier.ttl = 5000
        #persistent_notifier.username = "root"
        #persistent_notifier.password = "root"

        [[event_handler]]
        name="userPostSelfRegistration"
        subscriptions=["POST_ADD_USER"]

        [service_provider]
        sp_name_regex = "^[\\sa-zA-Z0-9._-]*$"
      master-datasources.xml: |-
        <datasources-configuration xmlns:svns="http://org.wso2.securevault/configuration">

            <providers>
                <provider>org.wso2.carbon.ndatasource.rdbms.RDBMSDataSourceReader</provider>
            </providers>

            <datasources>

                <datasource>
                    <name>WSO2_CARBON_DB</name>
                    <description>The datasource used for registry and user manager</description>
                    <jndiConfig>
                        <name>jdbc/WSO2CarbonDB</name>
                    </jndiConfig>
                    <definition type="RDBMS">
                        <configuration>
                            <url>jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE</url>
                            <username>wso2carbon</username>
                            <password>wso2carbon</password>
                            <driverClassName>org.h2.Driver</driverClassName>
                            <maxActive>50</maxActive>
                            <maxWait>60000</maxWait>
                            <testOnBorrow>true</testOnBorrow>
                            <validationQuery>SELECT 1</validationQuery>
                            <validationInterval>30000</validationInterval>
                            <defaultAutoCommit>true</defaultAutoCommit>
                        </configuration>
                    </definition>
                </datasource>

                <datasource>
                    <name>WSO2AM_DB</name>
                    <description>The datasource used for API Manager database</description>
                    <jndiConfig>
                        <name>jdbc/WSO2AM_DB</name>
                    </jndiConfig>
                    <definition type="RDBMS">
                        <configuration>
                            <url>jdbc:h2:./repository/database/WSO2AM_DB;DB_CLOSE_ON_EXIT=FALSE;AUTO_SERVER=TRUE;MVCC=TRUE</url>
                            <username>wso2carbon</username>
                            <password>wso2carbon</password>
                            <defaultAutoCommit>true</defaultAutoCommit>
                            <driverClassName>org.h2.Driver</driverClassName>
                            <maxActive>50</maxActive>
                            <maxWait>60000</maxWait>
                            <testOnBorrow>true</testOnBorrow>
                            <validationQuery>SELECT 1</validationQuery>
                            <validationInterval>30000</validationInterval>
                        </configuration>
                    </definition>
                </datasource>

                <datasource>
                    <name>WSO2AM_STATS_DB</name>
                    <description>The datasource used for getting statistics to API Manager</description>
                    <jndiConfig>
                        <name>jdbc/WSO2AM_STATS_DB</name>
                    </jndiConfig>
                    <definition type="RDBMS">
                        <configuration>
                            <url>jdbc:h2:../tmpStatDB/WSO2AM_STATS_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000;AUTO_SERVER=TRUE;MVCC=TRUE</url>
                            <username>wso2carbon</username>
                            <password>wso2carbon</password>
                            <defaultAutoCommit>true</defaultAutoCommit>
                            <driverClassName>org.h2.Driver</driverClassName>
                            <maxActive>50</maxActive>
                            <maxWait>60000</maxWait>
                            <testOnBorrow>true</testOnBorrow>
                            <validationQuery>SELECT 1</validationQuery>
                            <validationInterval>30000</validationInterval>
                        </configuration>
                    </definition>
                </datasource>
                <datasource>
                    <name>WSO2_SHARED_DB</name>
                    <description>Shared Database for user and registry data</description>
                    <jndiConfig>
                        <name>jdbc/SHARED_DB</name>
                    </jndiConfig>
                    <definition type="RDBMS">
                        <configuration>
                            <url>jdbc:h2:./repository/database/WSO2SHARED_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000</url>
                            <username>wso2carbon</username>
                            <password>wso2carbon</password>
                            <driverClassName>org.h2.Driver</driverClassName>
                            <maxActive>50</maxActive>
                            <maxWait>60000</maxWait>
                            <testOnBorrow>true</testOnBorrow>
                            <validationInterval>30000</validationInterval>
                            <defaultAutoCommit>true</defaultAutoCommit>
                        </configuration>
                    </definition>
                </datasource>

                <datasource>
                    <name>WSO2_MB_STORE_DB</name>
                    <description>The datasource used for message broker database</description>
                    <jndiConfig>
                        <name>WSO2MBStoreDB</name>
                    </jndiConfig>
                    <definition type="RDBMS">
                        <configuration>
                            <url>jdbc:h2:./repository/database/WSO2MB_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000;MVCC=TRUE</url>
                            <username>wso2carbon</username>
                            <password>wso2carbon</password>
                            <driverClassName>org.h2.Driver</driverClassName>
                            <maxActive>50</maxActive>
                            <maxWait>60000</maxWait>
                            <testOnBorrow>true</testOnBorrow>
                            <validationQuery>SELECT 1</validationQuery>
                            <validationInterval>30000</validationInterval>
                            <defaultAutoCommit>false</defaultAutoCommit>
                        </configuration>
                    </definition>
                </datasource>

                <!-- For an explanation of the properties, see: http://people.apache.org/~fhanik/jdbc-pool/jdbc-pool.html -->
                <!--datasource>
                    <name>SAMPLE_DATA_SOURCE</name>
                    <jndiConfig>
                        <name></name>
                        <properties>
                            <property name="java.naming.factory.initial"></property>
                            <property name="java.naming.provider.url"></property>
                        </properties>
                    </jndiConfig>
                    <definition type="RDBMS">
                        <configuration>

                            <defaultAutoCommit></defaultAutoCommit>
                            <defaultReadOnly></defaultReadOnly>
                            <defaultTransactionIsolation>NONE|READ_COMMITTED|READ_UNCOMMITTED|REPEATABLE_READ|SERIALIZABLE</defaultTransactionIsolation>
                            <defaultCatalog></defaultCatalog>
                            <username></username>
                            <password svns:secretAlias="WSO2.DB.Password"></password>
                            <maxActive></maxActive>
                            <maxIdle></maxIdle>
                            <initialSize></initialSize>
                            <maxWait></maxWait>

                            <dataSourceClassName>com.mysql.jdbc.jdbc2.optional.MysqlXADataSource</dataSourceClassName>
                            <dataSourceProps>
                                <property name="url">jdbc:mysql://localhost:3306/Test1</property>
                                <property name="user">root</property>
                                <property name="password">123</property>
                            </dataSourceProps>

                        </configuration>
                    </definition>
                </datasource-->

            </datasources>

        </datasources-configuration>
      user-mgt.xml: |-
        <?xml version="1.0" encoding="UTF-8"?>
        <!--
          ~ Copyright WSO2, Inc. (http://wso2.com)
          ~
          ~ Licensed under the Apache License, Version 2.0 (the "License");
          ~ you may not use this file except in compliance with the License.
          ~ You may obtain a copy of the License at
          ~
          ~ http://www.apache.org/licenses/LICENSE-2.0
          ~
          ~ Unless required by applicable law or agreed to in writing, software
          ~ distributed under the License is distributed on an "AS IS" BASIS,
          ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          ~ See the License for the specific language governing permissions and
          ~ limitations under the License.
          -->
        <UserManager>
            <Realm>
                <Configuration>
                    <AddAdmin>true</AddAdmin>
                    <AdminRole>admin</AdminRole>
                    <AdminUser>
                        <UserName>admin</UserName>
                        <Password>admin</Password>
                    </AdminUser>
                    <EveryOneRoleName>everyone</EveryOneRoleName>
                    <!-- By default users in this role sees the registry root -->
                    <!--Enable username claim retrieve from the UM_USER_NAME in JDBC datasources-->
                    <OverrideUsernameClaimFromInternalUsername>true</OverrideUsernameClaimFromInternalUsername>
                    <Property name="isCascadeDeleteEnabled">true</Property>
                    <Property name="initializeNewClaimManager">true</Property>
                    <Property name="dataSource">jdbc/SHARED_DB</Property>
                </Configuration>
                <!-- Following is the configuration for internal JDBC user store. This user store manager is based on JDBC.
                  In case if application needs to manage passwords externally set property
                  <Property name="PasswordsExternallyManaged">true</Property>.
                  In case if user core cache domain is needed to identify uniquely set property
                  <Property name="UserCoreCacheIdentifier">domain</Property>.
                  Furthermore properties, IsEmailUserName and DomainCalculation are readonly properties.
                  Note: Do not comment within UserStoreManager tags. Cause, specific tag names are used as tokens
                  when building configurations for products.
              -->
                <UserStoreManager class="org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager">
                    <Property name="TenantManager">org.wso2.carbon.user.core.tenant.JDBCTenantManager</Property>
                    <Property name="ReadOnly">false</Property>
                    <Property name="ReadGroups">true</Property>
                    <Property name="WriteGroups">true</Property>
                    <Property name="UsernameJavaRegEx">^[\S]{3,30}$</Property>
                    <Property name="UsernameJavaScriptRegEx">^[\S]{3,30}$</Property>
                    <Property name="UsernameJavaRegExViolationErrorMsg">Username pattern policy violated</Property>
                    <Property name="PasswordJavaRegEx">^[\S]{5,30}$</Property>
                    <Property name="PasswordJavaScriptRegEx">^[\S]{5,30}$</Property>
                    <Property name="PasswordJavaRegExViolationErrorMsg">Password length should be within 5 to 30 characters</Property>
                    <Property name="RolenameJavaRegEx">^[\S]{3,30}$</Property>
                    <Property name="RolenameJavaScriptRegEx">^[\S]{3,30}$</Property>
                    <Property name="CaseInsensitiveUsername">true</Property>
                    <Property name="SCIMEnabled">false</Property>
                    <Property name="IsBulkImportSupported">true</Property>
                    <Property name="PasswordDigest">SHA-256</Property>
                    <Property name="StoreSaltedPassword">true</Property>
                    <Property name="MultiAttributeSeparator">,</Property>
                    <Property name="MaxUserNameListLength">100</Property>
                    <Property name="MaxRoleNameListLength">100</Property>
                    <Property name="UserRolesCacheEnabled">true</Property>
                    <Property name="UserNameUniqueAcrossTenants">false</Property>
                    <Property name="LeadingOrTrailingSpaceAllowedInUserName">false</Property>
                </UserStoreManager>
                <!-- If product is using an external LDAP as the user store in READ ONLY mode, use following user manager.
                In case if user core cache domain is needed to identify uniquely set property
                <Property name="UserCoreCacheIdentifier">domain</Property>
              -->
                <!--UserStoreManager class="org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager">
                    <Property name="TenantManager">org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager</Property>
                    <Property name="ConnectionURL">ldap://localhost:10389</Property>
                    <Property name="ConnectionName">uid=admin,ou=system</Property>
                    <Property name="ConnectionPassword">admin</Property>
                    <Property name="AnonymousBind">false</Property>
                    <Property name="UserSearchBase">ou=system</Property>
                    <Property name="UserNameAttribute">uid</Property>
                    <Property name="UserNameSearchFilter">(&amp;(objectClass=person)(uid=?))</Property>
                    <Property name="UserNameListFilter">(&amp;(objectClass=person)(!(sn=Service)))</Property>
                    <Property name="DisplayNameAttribute"/>
                    <Property name="ReadGroups">true</Property>
                    <Property name="GroupSearchBase">ou=system</Property>
                    <Property name="GroupNameAttribute">cn</Property>
                    <Property name="GroupNameSearchFilter">(&amp;(objectClass=groupOfNames)(cn=?))</Property>
                    <Property name="GroupNameListFilter">(objectClass=groupOfNames)</Property>
                    <Property name="MembershipAttribute">member</Property>
                    <Property name="BackLinksEnabled">false</Property>
                    <Property name="UsernameJavaRegEx">[a-zA-Z0-9._\-|//]{3,30}$</Property>
                    <Property name="PasswordJavaRegEx">^[\S]{5,30}$</Property>
                    <Property name="RolenameJavaRegEx">[a-zA-Z0-9._\-|//]{3,30}$</Property>
                    <Property name="SCIMEnabled">false</Property>
                    <Property name="PasswordHashMethod">PLAIN_TEXT</Property>
                    <Property name="MultiAttributeSeparator">,</Property>
                    <Property name="MaxUserNameListLength">100</Property>
                    <Property name="MaxRoleNameListLength">100</Property>
                    <Property name="UserRolesCacheEnabled">true</Property>
                    <Property name="ConnectionPoolingEnabled">true</Property>
                    <Property name="LDAPConnectionTimeout">5000</Property>
                    <Property name="ReadTimeout"/>
                    <Property name="RetryAttempts"/>
                    <Property name="ReplaceEscapeCharactersAtUserLogin">true</Property>
                    <Property name="ConnectionRetryDelay">120000</Property>
                </UserStoreManager-->
                <!-- Active directory configuration is as follows.
                  In case if user core cache domain is needed to identify uniquely set property
                  <Property name="UserCoreCacheIdentifier">domain</Property>
                  There are few special properties for "Active Directory".
                  They are :
                  1.Referral - (comment out this property if this feature is not reuired) This enables LDAP referral support.
                  2.BackLinksEnabled - (Do not comment, set to true or false) In some cases LDAP works with BackLinksEnabled.
                  In which role is stored at user level. Depending on this value we need to change the Search Base within code.
                  isADLDSRole - (Do not comment) Set to true if connecting to an AD LDS instance else set to false.
              -->
                <!--UserStoreManager class="org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager">
                    <Property name="TenantManager">org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager</Property>
                    <Property name="ConnectionURL">ldaps://10.100.1.100:636</Property> 
                    <Property name="ConnectionName">CN=admin,CN=Users,DC=WSO2,DC=Com</Property>
                    <Property name="ConnectionPassword">A1b2c3d4</Property>
                    <Property name="AnonymousBind">false</Property>
                    <Property name="UserSearchBase">CN=Users,DC=WSO2,DC=Com</Property>
                    <Property name="UserEntryObjectClass">user</Property>
                    <Property name="UserNameAttribute">cn</Property>
                    <Property name="UserNameSearchFilter">(&amp;(objectClass=user)(cn=?))</Property>
                    <Property name="UserNameListFilter">(&amp;(objectClass=user)(!(sn=Service)))</Property>
                    <Property name="DisplayNameAttribute"/>
                    <Property name="ReadGroups">true</Property>
                    <Property name="WriteGroups">true</Property>
                    <Property name="GroupSearchBase">CN=Users,DC=WSO2,DC=Com</Property>
                    <Property name="GroupEntryObjectClass">group</Property>
                    <Property name="GroupNameAttribute">cn</Property>
                    <Property name="GroupNameSearchFilter">(&amp;(objectClass=group)(cn=?))</Property>
                    <Property name="GroupNameListFilter">(objectcategory=group)</Property>
                    <Property name="MembershipAttribute">member</Property>
                    <Property name="MemberOfAttribute">memberOf</Property>
                    <Property name="BackLinksEnabled">true</Property>
                    <Property name="Referral">follow</Property>
                    <Property name="UsernameJavaRegEx">[a-zA-Z0-9._\-|//]{3,30}$</Property>
                    <Property name="UsernameJavaScriptRegEx">^[\S]{3,30}$</Property>
                    <Property name="UsernameJavaRegExViolationErrorMsg">Username pattern policy violated</Property>
                    <Property name="PasswordJavaRegEx">^[\S]{5,30}$</Property>
                    <Property name="PasswordJavaScriptRegEx">^[\S]{5,30}$</Property>
                    <Property name="PasswordJavaRegExViolationErrorMsg">Password length should be within 5 to 30 characters</Property>
                    <Property name="RolenameJavaRegEx">[a-zA-Z0-9._\-|//]{3,30}$</Property>
                    <Property name="RolenameJavaScriptRegEx">^[\S]{3,30}$</Property>
                    <Property name="SCIMEnabled">false</Property>
                    <Property name="IsBulkImportSupported">true</Property>
                    <Property name="EmptyRolesAllowed">true</Property>
                    <Property name="PasswordHashMethod">PLAIN_TEXT</Property>
                    <Property name="MultiAttributeSeparator">,</Property>
                    <Property name="isADLDSRole">false</Property>
                    <Property name="userAccountControl">512</Property>
                    <Property name="MaxUserNameListLength">100</Property>     
                    <Property name="MaxRoleNameListLength">100</Property>                     
                    <Property name="MembershipAttributeRange">1500</Property>
                    <Property name="kdcEnabled">false</Property>
                    <Property name="defaultRealmName">WSO2.ORG</Property>
                    <Property name="UserRolesCacheEnabled">true</Property>
                    <Property name="ConnectionPoolingEnabled">false</Property>
                    <Property name="LDAPConnectionTimeout">5000</Property>
                    <Property name="ReadTimeout"/>
                    <Property name="RetryAttempts"/>
                    <Property name="StartTLSEnabled">false</Property>
                    <Property name="ConnectionRetryDelay">120000</Property>
                </UserStoreManager-->
                <!-- Following user manager is used by Identity Server (IS) as its default user manager.
                    IS will do token replacement when building the product. Therefore do not change the syntax.
                    If "kdcEnabled" parameter is true, IS will allow service principle management.
                    Thus "ServicePasswordJavaRegEx", "ServiceNameJavaRegEx" properties control the service name format and
                    service password formats. In case if user core cache domain is needed to identify uniquely set property
                    <Property name="UserCoreCacheIdentifier">domain</Property>
                -->
                <!--ISUserStoreManager class="org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager">
                    <Property name="TenantManager">org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager</Property>
                    <Property name="ConnectionURL">ldap://localhost:${Ports.EmbeddedLDAP.LDAPServerPort}</Property>
                    <Property name="ConnectionName">uid=admin,ou=system</Property>
                    <Property name="ConnectionPassword">admin</Property>
                    <Property name="AnonymousBind">false</Property>
                    <Property name="UserSearchBase">ou=Users,dc=wso2,dc=org</Property>
                    <Property name="UserEntryObjectClass">identityPerson</Property>
                    <Property name="UserNameAttribute">uid</Property>
                    <Property name="UserNameSearchFilter">(&amp;(objectClass=person)(uid=?))</Property>
                    <Property name="UserNameListFilter">(&amp;(objectClass=person)(!(sn=Service)))</Property>
                    <Property name="DisplayNameAttribute"/>
                    <Property name="ReadGroups">true</Property>
                    <Property name="WriteGroups">true</Property>
                    <Property name="GroupSearchBase">ou=Groups,dc=wso2,dc=org</Property>
                    <Property name="GroupEntryObjectClass">groupOfNames</Property>
                    <Property name="GroupNameAttribute">cn</Property>
                    <Property name="GroupNameSearchFilter">(&amp;(objectClass=groupOfNames)(cn=?))</Property>
                    <Property name="GroupNameListFilter">(objectClass=groupOfNames)</Property>
                    <Property name="MembershipAttribute">member</Property>
                    <Property name="BackLinksEnabled">false</Property>
                    <Property name="UsernameJavaRegEx">[a-zA-Z0-9._\-|//]{3,30}$</Property>
                    <Property name="UsernameJavaScriptRegEx">^[\S]{3,30}$</Property>
                    <Property name="UsernameJavaRegExViolationErrorMsg">Username pattern policy violated</Property>
                    <Property name="PasswordJavaRegEx">^[\S]{5,30}$</Property>
                    <Property name="PasswordJavaScriptRegEx">^[\S]{5,30}$</Property>
                    <Property name="PasswordJavaRegExViolationErrorMsg">Password length should be within 5 to 30 characters</Property>
                    <Property name="RolenameJavaRegEx">[a-zA-Z0-9._\-|//]{3,30}$</Property>
                    <Property name="RolenameJavaScriptRegEx">^[\S]{3,30}$</Property>
                    <Property name="SCIMEnabled">true</Property>
                    <Property name="IsBulkImportSupported">true</Property>
                    <Property name="EmptyRolesAllowed">true</Property>
                    <Property name="PasswordHashMethod">PLAIN_TEXT</Property>
                    <Property name="MultiAttributeSeparator">,</Property>
                    <Property name="MaxUserNameListLength">100</Property>
                    <Property name="MaxRoleNameListLength">100</Property>
                    <Property name="kdcEnabled">false</Property>
                    <Property name="defaultRealmName">WSO2.ORG</Property>
                    <Property name="UserRolesCacheEnabled">true</Property>
                    <Property name="ConnectionPoolingEnabled">false</Property>
                    <Property name="LDAPConnectionTimeout">5000</Property>
                    <Property name="ReadTimeout"/>
                    <Property name="RetryAttempts"/>
                    <Property name="StartTLSEnabled">false</Property>
                    <Property name="ConnectionRetryDelay">120000</Property>
                </ISUserStoreManager-->
                <AuthorizationManager class="org.wso2.carbon.user.core.authorization.JDBCAuthorizationManager">
                    <Property name="AdminRoleManagementPermissions">/permission</Property>
                    <Property name="AuthorizationCacheEnabled">true</Property>
                    <Property name="GetAllRolesOfUserEnabled">false</Property>
                </AuthorizationManager>
            </Realm>
        </UserManager>
        <!--

        ************* Description of some of the configuration properties used in user-mgt.xml *********************************

        DomainName -
            This property must be used by all secondary user store managers in multiple user store configuration.
            DomainName is a unique identifier given to the user store. Users must provide both the domain name and
            username at log-in as "DomainName\Username"

        UserRolesCacheEnabled -
            This is to indicate whether to cache role list of a user. By default it is set to true.
            You may need to disable it if user-roles are changed by external means and need to reflect
            those changes in the carbon product immediately.

        ReplaceEscapeCharactersAtUserLogin -
            This is to configure whether escape characters in user name needs to be replaced at user login.
            Currently the identified escape characters that needs to be replaced are '\' & '\\'

        UserDNPattern -
            This property will be used when authenticating users. During authentication we do a bind. But if the user is login
            with email address or some other property we need to first lookup LDAP and retrieve DN for the user.
            This involves an additional step.  If UserDNPattern is specified the DN will be constructed using the pattern
            specified in this property. Performance of this is much better than looking up DN and binding user.

        RoleDNPattern -
            This property will be used when checking whether user has been assigned to a given role.
            Rather than searching the role in search base, by using this property direct search can be done.

        PasswordHashMethod -
            This says how the password should be stored. Allowed values are as follows,
                SHA - Uses SHA digest method
                MD5 - Uses MD 5 digest method
                PLAIN_TEXT - Plain text passwords
                In addition to above this supports all digest methods supported by http://docs.oracle.com/javase/6/docs/api/java/security/MessageDigest.html.

        DisplayNameAttribute -
            This is to have a dedicated LDAP attribute to display an entity(User/Role) in UI, in addition to the UserNameAttribute which is used for IS-UserStore interactions.
        -->
      registry.xml: |-
        <?xml version="1.0" encoding="ISO-8859-1"?>

        <!--
          ~ Copyright 2005-2011 WSO2, Inc. (http://wso2.com)
          ~
          ~ Licensed under the Apache License, Version 2.0 (the "License");
          ~ you may not use this file except in compliance with the License.
          ~ You may obtain a copy of the License at
          ~
          ~ http://www.apache.org/licenses/LICENSE-2.0
          ~
          ~ Unless required by applicable law or agreed to in writing, software
          ~ distributed under the License is distributed on an "AS IS" BASIS,
          ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          ~ See the License for the specific language governing permissions and
          ~ limitations under the License.
          -->
        <wso2registry>
            <!-- 
            For details on configuring different config & governance registries see;
            http://wso2.org/library/tutorials/2010/04/sharing-registry-space-across-multiple-product-instances
            -->

            <currentDBConfig>wso2registry</currentDBConfig>
            <readOnly>false</readOnly>
            <enableCache>true</enableCache>
            <registryRoot>/</registryRoot>

            <dbConfig name="wso2registry">
                <dataSource>jdbc/WSO2CarbonDB</dataSource>
            </dbConfig>
            <dbConfig name="govregistry">
                <dataSource>jdbc/SHARED_DB</dataSource>
            </dbConfig>
            <remoteInstance url="https://localhost">
                <id>gov</id>
                <cacheId>wso2carbon@jdbc:h2:./repository/database/WSO2SHARED_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000</cacheId>
                <dbConfig>govregistry</dbConfig>
                <readOnly>false</readOnly>
                <enableCache>true</enableCache>
                <registryRoot>/</registryRoot>
            </remoteInstance>


            <mount path="/_system/governance" overwrite="true">
                <instanceId>gov</instanceId>
                <targetPath>/_system/governance</targetPath>
            </mount>
            <mount path="/_system/config" overwrite="true">
                <instanceId>gov</instanceId>
                <targetPath>/_system/config</targetPath>
            </mount>

            <!-- This handler provides the feature to add a simlink to a given resource -->

            <handler class="org.wso2.carbon.registry.extensions.handlers.ExtensionsSymLinkHandler">
                <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.URLMatcher">
                    <property name="pattern">.*</property>
                </filter>
            </handler>

            <!-- This handler provides resource retention locking for the resources -->

            <handler class="org.wso2.carbon.registry.extensions.handlers.RetentionHandler" 
                    methods="PUT,DELETE,MOVE,RENAME,IMPORT,COPY,ADD_ASSOCIATION,REMOVE_ASSOCIATION,RESTORE,RESTORE_VERSION">
                <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.URLMatcher">
                    <property name="pattern">.*</property>
                </filter>
            </handler>

            <!-- This handler processes the services being added to the registry -->

            <handler class="org.wso2.carbon.registry.extensions.handlers.ServiceMediaTypeHandler">
                <!--property name="disableWSDLValidation">true</property-->
                <property name="defaultServiceVersion">1.0.0-SNAPSHOT</property>
                <property name="disableSymlinkCreation">true</property>
                <property name="smartLifecycleLinks" type="xml">
                    <key>dev</key>
                    <key>qa</key>
                    <key>live</key>
                </property>        
                <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                    <property name="mediaType">application/vnd.wso2-service+xml</property>
                </filter>
            </handler>

            <!-- This handler provides the ability to remove the entire heirarchy for a given service while deleting the service -->

            <handler class="org.wso2.carbon.registry.extensions.handlers.DeleteHierarchyHandler">
                <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                    <property name="mediaType">application/vnd.wso2-service+xml</property>
                </filter>
            </handler>    


            <!-- This handler use to index APIs when there change in Api artifact-->
            <handler class="org.wso2.carbon.registry.indexing.IndexingHandler">
                <filter class = "org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                    <property name="mediaType">application/vnd.wso2-api+xml</property>
                </filter>
            </handler>

          <!--This handler delete the subscription hierarcy generated in the notifications path when a subscription is deleted directly -->

            <handler class="org.wso2.carbon.registry.extensions.handlers.DeleteHierarchyHandler">
                <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.URLMatcher">
                        <property name="deletePattern">/_system/governance/event/topics/registry/notifications/.*</property>
                </filter>
            </handler>


            <!-- This handler processes the links for the lifecycle -->

            <handler class="org.wso2.carbon.registry.extensions.handlers.SmartLifecycleLinkHandler">
                <property name="states" type="xml">
                    <state key="dev">Created</state>
                    <state key="qa">Tested</state>
                    <state key="live">Deployed</state>
                </property>
                <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                    <property name="mediaType">application/vnd.wso2-smart-link</property>
                </filter>
            </handler>

            <!-- This handler processes the policy files of the given media type defined by the filter -->

            <handler class="org.wso2.carbon.registry.extensions.handlers.PolicyMediaTypeHandler">
          <property name="policyLocationConfiguration" type="xml">
                    <location>/trunk/policies/</location>            
          </property>
                <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                    <property name="mediaType">application/policy+xml</property>
                </filter>
            </handler>

            <!-- This handler processes the schema types which are defined by the filter  -->

            <handler class="org.wso2.carbon.registry.extensions.handlers.XSDMediaTypeHandler">
                <!--property name="disableSchemaValidation">true</property-->
                <property name="disableSymlinkCreation">true</property>
                <property name="locationConfiguration" type="xml">
                    <location>/trunk/schemas/</location>            
                </property>
                <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                    <property name="mediaType">application/x-xsd+xml</property>
                </filter>
            </handler>

            <!-- This handler processes making an external link to a given resource -->

            <handler class="org.wso2.carbon.registry.extensions.handlers.ExternalLinkHandler">
                <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                    <property name="mediaType">application/vnd.wso2-hyperlink</property>
                </filter>
            </handler>

            <!-- This handler processes service end-points defined in the WSDL files being uploaded to the registry -->

            <handler class="org.wso2.carbon.registry.extensions.handlers.EndpointMediaTypeHandler">
                <property name="endpointMediaType">application/vnd.wso2.endpoint</property>
                <property name="endpointLocationConfiguration" type="xml">
                    <location>/trunk/endpoints/</location>
                </property>
                <filter class="org.wso2.carbon.registry.extensions.filters.EndpointMediaTypeMatcher">
                </filter>
            </handler>

            <handler class="org.wso2.carbon.governance.registry.extensions.handlers.UriMediaTypeHandler">
          <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
              <property name="mediaType">application/vnd.wso2-uri+xml</property>
          </filter>
            </handler>

            <!-- When a resource/governance artifact is deleted, this handler will cleanup all its bounded subscriptions from registry-->

            <handler class="org.wso2.carbon.registry.extensions.handlers.DeleteSubscriptionHandler">
                <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.URLMatcher">
                        <property name="pattern">.*</property>
                </filter>
            </handler>

            <!--This handler manage the meta data resource caching-->
            <handler class="org.wso2.carbon.governance.registry.extensions.handlers.MetaDataCacheHandler">
                <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.URLMatcher">
                    <property name="pattern">.*</property>
                </filter>
            </handler>

            <!--This handler clears the caches when workflow-extension config is updated.-->
          <handler class="org.wso2.carbon.apimgt.impl.handlers.APIConfigMediaTypeHandler" methods="PUT,DELETE">
              <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                <property name="mediaType">workflow-config</property>
            </filter>
          </handler>

            <!--This handler hides the password of secure endpoints if specified, in an API-->
            <!--handler class="org.wso2.carbon.apimgt.impl.handlers.APIEndpointPasswordRegistryHandler" methods="GET,PUT">
                <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                    <property name="mediaType">application/vnd.wso2-api+xml</property>
                </filter>
            </handler-->

            <!--remoteInstance url="https://localhost:9443/registry">
          <id>instanceid</id>
              <username>username</username>
              <password>password</password>
                <cacheId>wso2carbon@jdbc:h2:repository/database/WSO2CARBON_DB</cacheId>
            </remoteInstance-->

            <!-- This defines the Atom based remote registry instance configuration -->

            <!--remoteInstance url="https://localhost:9443/registry">
                <id>instanceid</id>
                <username>username</username>
                <password>password</password>
                <type>ws</type>
                <cacheId>wso2carbon@jdbc:h2:repository/database/WSO2CARBON_DB</cacheId>
            </remoteInstance-->

            <!-- This defines the JDBC based remote registry instance configuration  -->

            <!--remoteInstance url="https://localhost:9443/registry">
                <id>instanceid</id>
                <dbConfig>wso2registry</dbConfig>
                <readOnly>false</readOnly>
                <enableCache>true</enableCache>
                <registryRoot>/</registryRoot>
            </remoteInstance-->

            <!-- This defines the mount configuration to be used with the remote instance and the target path for the mount -->

            <!--mount path="/_system/config" overwrite="true|false|virtual">
                <instanceId>instanceid</instanceId>
                <targetPath>/_system/nodes</targetPath>
            </mount-->

            <!-- This defines index configuration which is used in meta data search feature of the registry -->
            <indexingConfiguration>
                <startIndexing>true</startIndexing>
                <skipCache>true</skipCache>
                <startingDelayInSeconds>35</startingDelayInSeconds>
                <indexingFrequencyInSeconds>3</indexingFrequencyInSeconds>
                <!--number of resources submit for given indexing thread -->
                <batchSize>40</batchSize>
                <!--number of worker threads for indexing -->
                <indexerPoolSize>40</indexerPoolSize>
                <!-- location storing the time the indexing took place-->
                <lastAccessTimeLocation>/_system/local/repository/components/org.wso2.carbon.registry/indexing/lastaccesstime</lastAccessTimeLocation>
                <!-- the indexers that implement the indexer interface for a relevant media type/(s) -->
                <indexers>
                    <!--indexer class="org.wso2.carbon.registry.indexing.indexer.MSExcelIndexer" mediaTypeRegEx="application/vnd.ms-excel"/>
                    <indexer class="org.wso2.carbon.registry.indexing.indexer.MSPowerpointIndexer" mediaTypeRegEx="application/vnd.ms-powerpoint"/>
                    <indexer class="org.wso2.carbon.registry.indexing.indexer.MSWordIndexer" mediaTypeRegEx="application/msword"/>
                    <indexer class="org.wso2.carbon.registry.indexing.indexer.PDFIndexer" mediaTypeRegEx="application/pdf"/>
                    <indexer class="org.wso2.carbon.registry.indexing.indexer.XMLIndexer" mediaTypeRegEx="application/xml"/-->
                    <!--indexer class="org.wso2.carbon.governance.registry.extensions.indexers.RXTIndexer" mediaTypeRegEx="application/wsdl\+xml" profiles ="default,api-devportal,api-publisher"/>
                    <indexer class="org.wso2.carbon.governance.registry.extensions.indexers.RXTIndexer" mediaTypeRegEx="application/x-xsd\+xml " profiles ="default,api-devportal,api-publisher"/>
                    <indexer class="org.wso2.carbon.governance.registry.extensions.indexers.RXTIndexer" mediaTypeRegEx="application/policy\+xml" profiles ="default,api-devportal,api-publisher"/-->
                    <indexer class="org.wso2.carbon.apimgt.impl.indexing.indexer.DocumentIndexer" mediaTypeRegEx="application/vnd.wso2-document\+xml" profiles ="default,api-devportal,api-publisher"/>
                    <indexer class="org.wso2.carbon.apimgt.impl.indexing.indexer.CustomAPIIndexer" mediaTypeRegEx="application/vnd.(.)+\+xml" profiles ="default,api-devportal,api-publisher"/>
                    <!--indexer class="org.wso2.carbon.registry.indexing.indexer.XMLIndexer" mediaTypeRegEx="application/(.)+\+xml"/>
                    <indexer class="org.wso2.carbon.registry.indexing.indexer.PlainTextIndexer" mediaTypeRegEx="text/(.)+"/>
                    <indexer class="org.wso2.carbon.registry.indexing.indexer.PlainTextIndexer" mediaTypeRegEx="application/x-javascript"/-->
              <indexer class="org.wso2.carbon.apimgt.impl.indexing.indexer.PlainTextIndexer" mediaTypeRegEx="text/plain+" profiles ="default,api-devportal,api-publisher"/>
              <indexer class="org.wso2.carbon.apimgt.impl.indexing.indexer.PDFIndexer" mediaTypeRegEx="application/pdf" profiles ="default,api-devportal,api-publisher"/>
              <indexer class="org.wso2.carbon.apimgt.impl.indexing.indexer.MSWordIndexer" mediaTypeRegEx="application/msword" profiles ="default,api-devportal,api-publisher"/>
              <indexer class="org.wso2.carbon.apimgt.impl.indexing.indexer.MSPowerpointIndexer" mediaTypeRegEx="application/vnd.ms-powerpoint" profiles ="default,api-devportal,api-publisher"/>
              <indexer class="org.wso2.carbon.apimgt.impl.indexing.indexer.MSExcelIndexer" mediaTypeRegEx="application/vnd.ms-excel" profiles ="default,api-devportal,api-publisher"/>
              <indexer class="org.wso2.carbon.apimgt.impl.indexing.indexer.XMLIndexer" mediaTypeRegEx="application/xml" profiles ="default,api-devportal,api-publisher"/>
                  <indexer class="org.wso2.carbon.apimgt.impl.indexing.indexer.WSDLIndexer" mediaTypeRegEx="application/api-wsdl" profiles ="default,api-devportal,api-publisher"/>
                </indexers>
                <exclusions>
                    <exclusion pathRegEx="/_system/config/repository/dashboards/gadgets/swfobject1-5/.*[.]html"/>
                    <exclusion pathRegEx="/_system/local/repository/components/org[.]wso2[.]carbon[.]registry/mount/.*"/>
                </exclusions>
            </indexingConfiguration>

            
            <versionResourcesOnChange>false</versionResourcesOnChange>

            <!-- NOTE: You can edit the options under "StaticConfiguration" only before the
            startup. -->
            <staticConfiguration>
                <versioningProperties>false</versioningProperties>
                <versioningComments>false</versioningComments>
                <versioningTags>false</versioningTags>
                <versioningRatings>false</versioningRatings>
                <!-- Location you want to add service and default location will be /services/ -->
                <servicePath>/trunk/services/</servicePath>
            </staticConfiguration>

            <!-- This enables auto-versioning of resources (non-collection). Whenever a resource is updated a new version will be created -->
          
            <versionResourcesOnChange>false</versionResourcesOnChange>
            
            <!-- This enables JMX management for G-Reg -->
            
            <jmx enabled="false">
                <service name="InvocationStatistics" enabled="true"/>
                <service name="Activities" enabled="true"/>
                <service name="Properties" enabled="true"/>
                <service name="Subscriptions" enabled="true"/>
                <service name="Events" enabled="true"/>
            </jmx>
            
            <!-- If you need to use a Remote Human Task to provide the Work List functionality instead of the Embedded Human Task or if you want
                to use Work List notifications, uncomment the following configuration. Please note that you need to provide the credentials 
                and URL to connect to the remote instance (ex:- remote BPS server) if you are planning to use a Remote Human Task. You should
                provide credentials and URL to connect to the local instance if you simply want to use Work List notifications. -->
            
            <!--workList serverURL="local://services/" remote="false">
                <username>admin</username>
                <password>admin</password>
            </workList-->
            
            <!-- Sample SCM configuration. Please note that checkOutURL, workingDir, and mountPoint are mandatory for each connection. 
                The update frequency is in minutes. Setting readOnly would disable checkIn even if the checkInURL is set. The credentials
                are to connect to the corresponding repository and must be provided if required. -->
            
            <!--scm>
                <connection checkOutURL="scm:svn:http://svn.wso2.org/repos/wso2" workingDir="/valid/filesystem/path" mountPoint="/_system/foo" checkInURL="" readOnly="" updateFrequency="">
                  <username>admin</username>
                  <password>admin</password>
                </connection>
            </scm-->
            
            <!-- This defines the list of scheduled tasks for the registry -->
            
            <!--tasks>
                <task name="TaskName" class="com.foo.TaskClass">
                    <trigger cron="cronExpr"/>
                    <property key="foo" value="FooVal" />
                    <property key="bar" value="BarVal" />
                </task>
            </tasks-->

        </wso2registry>
      carbon.xml: |-
        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!--
        Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
        -->

        <!--
            This is the main server configuration file

            ${carbon.home} represents the carbon.home system property.
            Other system properties can be specified in a similar manner.
        -->
        <Server xmlns="http://wso2.org/projects/carbon/carbon.xml">

            <!--
              Product Name
            -->
            <Name>WSO2 API Manager</Name>

            <!--
              machine readable unique key to identify each product
            -->
            <ServerKey>AM</ServerKey>

            <!--
              Product Version
            -->
            <Version>3.0.0</Version>

            <!--
              Host name or IP address of the machine hosting this server
              e.g. www.wso2.org, 192.168.1.10
              This is will become part of the End Point Reference of the
              services deployed on this server instance.
            -->
            <!--HostName>www.wso2.org</HostName-->

            <!--
            Host name to be used for the Carbon management console
            -->
            <!--MgtHostName>mgt.wso2.org</MgtHostName-->

            <!--
                The URL of the back end server. This is where the admin services are hosted and
                will be used by the clients in the front end server.
                This is required only for the Front-end server. This is used when seperating BE server from FE server
              -->
            <ServerURL>local:/${carbon.context}/services/</ServerURL>
            <!--
            <ServerURL>https://${carbon.local.ip}:${carbon.management.port}${carbon.context}/services/</ServerURL>
            -->
            <!--
            The URL of the index page. This is where the user will be redirected after signing in to the
            carbon server.
            -->
            <!-- IndexPageURL>/carbon/admin/index.jsp</IndexPageURL-->

            <!--
            For cApp deployment, we have to identify the roles that can be acted by the current server.
            The following property is used for that purpose. Any number of roles can be defined here.
            Regular expressions can be used in the role.
            Ex : <Role>.*</Role> means this server can act any role
            -->
            <ServerRoles>
                <Role>APIManager</Role>
            </ServerRoles>

            <!-- uncommnet this line to subscribe to a bam instance automatically -->
            <!--<BamServerURL>https://bamhost:bamport/services/</BamServerURL>-->

            <!--
              The fully qualified name of the server
            -->
            <Package>org.wso2.carbon</Package>

            <!--
              Webapp context root of WSO2 Carbon management console.
            -->
            <WebContextRoot>/</WebContextRoot>

            <!--
              Proxy context path is a useful parameter to add a proxy path when a Carbon server is fronted by reverse proxy. In addtion
                to the proxy host and proxy port this parameter allows you add a path component to external URLs. e.g.
                URL of the Carbon server -> https://10.100.1.1:9443/carbon
              URL of the reverse proxy -> https://prod.abc.com/appserver/carbon

            appserver - proxy context path. This specially required whenever you are generating URLs to displace in
            Carbon UI components.
            -->
            <!--
              <MgtProxyContextPath></MgtProxyContextPath>
              <ProxyContextPath></ProxyContextPath>
            -->

            <!-- In-order to  get the registry http Port from the back-end when the default http transport is not the same-->
            <!--RegistryHttpPort>9763</RegistryHttpPort-->

            <!--
            Number of items to be displayed on a management console page. This is used at the
            backend server for pagination of various items.
            -->
            <ItemsPerPage>15</ItemsPerPage>

            <!-- The endpoint URL of the cloud instance management Web service -->
            <!--<InstanceMgtWSEndpoint>https://ec2.amazonaws.com/</InstanceMgtWSEndpoint>-->

            <!--
              Ports used by this server
            -->
            <Ports>

                <!-- Ports offset. This entry will set the value of the ports defined below to
                the define value + Offset.
                e.g. Offset=2 and HTTPS port=9443 will set the effective HTTPS port to 9445
                -->
                <Offset>0</Offset>

                <!-- The JMX Ports -->
                <JMX>
                    <!--The port RMI registry is exposed-->
                    <RMIRegistryPort>9999</RMIRegistryPort>
                    <!--The port RMI server should be exposed-->
                    <RMIServerPort>11111</RMIServerPort>
                </JMX>

                <!-- Embedded LDAP server specific ports -->
                <EmbeddedLDAP>
                    <!-- Port which embedded LDAP server runs -->
                    <LDAPServerPort>10389</LDAPServerPort>
                    <!-- Port which KDC (Kerberos Key Distribution Center) server runs -->
                    <KDCServerPort>8000</KDCServerPort>
                </EmbeddedLDAP>
          
          <!-- 
                    Override datasources JNDIproviderPort defined in bps.xml and datasources.properties files
          -->
          <!--<JNDIProviderPort>2199</JNDIProviderPort>-->
          <!--Override receive port of thrift based entitlement service.-->
          <ThriftEntitlementReceivePort>10500</ThriftEntitlementReceivePort>

            <!--
            This is the proxy port of the worker cluster. These need to be configured in a scenario where
            manager node is not exposed through the load balancer through which the workers are exposed
            therefore doesn't have a proxy port.
            <WorkerHttpProxyPort>80</WorkerHttpProxyPort>
            <WorkerHttpsProxyPort>443</WorkerHttpsProxyPort>
            -->

            </Ports>

            <!--
                JNDI Configuration
            -->
            <JNDI>
                <!-- 
                    The fully qualified name of the default initial context factory
                -->
                <DefaultInitialContextFactory>org.wso2.carbon.tomcat.jndi.CarbonJavaURLContextFactory</DefaultInitialContextFactory>
                <!-- 
                    The restrictions that are done to various JNDI Contexts in a Multi-tenant environment 
                -->
                <Restrictions>
                    <!--
                        Contexts that will be available only to the super-tenant
                    -->
                    <!-- <SuperTenantOnly>
                        <UrlContexts>
                            <UrlContext>
                                <Scheme>foo</Scheme>
                            </UrlContext>
                            <UrlContext>
                                <Scheme>bar</Scheme>
                            </UrlContext>
                        </UrlContexts>
                    </SuperTenantOnly> -->
                    <!-- 
                        Contexts that are common to all tenants
                    -->
                    <AllTenants>
                        <UrlContexts>
                            <UrlContext>
                                <Scheme>java</Scheme>
                            </UrlContext>
                            <!-- <UrlContext>
                                <Scheme>foo</Scheme>
                            </UrlContext> -->
                        </UrlContexts>
                    </AllTenants>
                    <!-- 
                        All other contexts not mentioned above will be available on a per-tenant basis 
                        (i.e. will not be shared among tenants)
                    -->
                </Restrictions>
            </JNDI>

            <!--
                Property to determine if the server is running an a cloud deployment environment.
                This property should only be used to determine deployment specific details that are
                applicable only in a cloud deployment, i.e when the server deployed *-as-a-service.
            -->
            <IsCloudDeployment>false</IsCloudDeployment>

            <!--
          Property to determine whether usage data should be collected for metering purposes
            -->
            <EnableMetering>false</EnableMetering>

            <!-- The Max time a thread should take for execution in seconds -->
            <MaxThreadExecutionTime>600</MaxThreadExecutionTime>

            <!--
                A flag to enable or disable Ghost Deployer. By default this is set to false. That is
                because the Ghost Deployer works only with the HTTP/S transports. If you are using
                other transports, don't enable Ghost Deployer.
            -->
            <GhostDeployment>
                <Enabled>false</Enabled>
            </GhostDeployment>


            <!--
                Eager loading or lazy loading is a design pattern commonly used in computer programming which
                will initialize an object upon creation or load on-demand. In carbon, lazy loading is used to
                load tenant when a request is received only. Similarly Eager loading is used to enable load
                existing tenants after carbon server starts up. Using this feature, you will be able to include
                or exclude tenants which are to be loaded when server startup.

                We can enable only one LoadingPolicy at a given time.

                1. Tenant Lazy Loading
                  This is the default behaviour and enabled by default. With this policy, tenants are not loaded at
                  server startup, but loaded based on-demand (i.e when a request is received for a tenant).
                  The default tenant idle time is 30 minutes.

                2. Tenant Eager Loading
                  This is by default not enabled. It can be be enabled by un-commenting the <EagerLoading> section.
                  The eager loading configurations supported are as below. These configurations can be given as the
                  value for <Include> element with eager loading.
                        (i)Load all tenants when server startup             -   *
                        (ii)Load all tenants except foo.com & bar.com       -   *,!foo.com,!bar.com
                        (iii)Load only foo.com &  bar.com to be included    -   foo.com,bar.com
            -->
            <Tenant>
                <LoadingPolicy>
                    <LazyLoading>
                        <IdleTime>30</IdleTime>
                    </LazyLoading>
                    <!-- <EagerLoading>
                          <Include>*,!foo.com,!bar.com</Include>
                    </EagerLoading>-->
                </LoadingPolicy>

                <!-- Flag to enable or disable tenant deletion. By default tenant deletion is enabled-->
                <TenantDelete>true</TenantDelete>

                <!-- Configurations related to listener invocation by tenant admin service-->
                <ListenerInvocationPolicy>
                    <!-- Flag to enable or disable listener invocation on tenant delete. This is disabled by default-->
                    <InvokeOnDelete>false</InvokeOnDelete>
                </ListenerInvocationPolicy>
            </Tenant>

            <!--
            Caching related configurations
            -->
            <Cache>
                <!-- Default cache timeout in minutes -->
                <DefaultCacheTimeout>15</DefaultCacheTimeout>
                <!-- Force all caches to act as local -->
                <ForceLocalCache>true</ForceLocalCache>
                <DiscardEmptyCaches>false</DiscardEmptyCaches>
            </Cache>

            <!--
            Axis2 related configurations
            -->
            <Axis2Config>
                <!--
                    Location of the Axis2 Services & Modules repository

                    This can be a directory in the local file system, or a URL.

                    e.g.
                    1. /home/wso2wsas/repository/ - An absolute path
                    2. repository - In this case, the path is relative to CARBON_HOME
                    3. file:///home/wso2wsas/repository/
                    4. http://wso2wsas/repository/
                -->
                <RepositoryLocation>${carbon.home}/repository/deployment/server/</RepositoryLocation>

                <!--
                Deployment update interval in seconds. This is the interval between repository listener
                executions. 
                -->
                <DeploymentUpdateInterval>15</DeploymentUpdateInterval>

                <!--
                    Location of the main Axis2 configuration descriptor file, a.k.a. axis2.xml file

                    This can be a file on the local file system, or a URL

                    e.g.
                    1. /home/repository/axis2.xml - An absolute path
                    2. conf/axis2.xml - In this case, the path is relative to CARBON_HOME
                    3. file:///home/carbon/repository/axis2.xml
                    4. http://repository/conf/axis2.xml
                -->
                <ConfigurationFile>${carbon.home}/repository/conf/axis2/axis2.xml</ConfigurationFile>

                <!--
                  ServiceGroupContextIdleTime, which will be set in ConfigurationContex
                  for multiple clients which are going to access the same ServiceGroupContext
                  Default Value is 30 Sec.
                -->
                <ServiceGroupContextIdleTime>30000</ServiceGroupContextIdleTime>

                <!--
                  This repository location is used to crete the client side configuration
                  context used by the server when calling admin services.
                -->
                <ClientRepositoryLocation>${carbon.home}/repository/deployment/client/</ClientRepositoryLocation>
                <!-- This axis2 xml is used in createing the configuration context by the FE server
                calling to BE server -->
                <clientAxis2XmlLocation>${carbon.home}/repository/conf/axis2/axis2_client.xml</clientAxis2XmlLocation>
                <!-- If this parameter is set, the ?wsdl on an admin service will not give the admin service wsdl. -->
                <HideAdminServiceWSDLs>true</HideAdminServiceWSDLs>
          
          <!--WARNING-Use With Care! Uncommenting bellow parameter would expose all AdminServices in HTTP transport.
          With HTTP transport your credentials and data routed in public channels are vulnerable for sniffing attacks. 
          Use bellow parameter ONLY if your communication channels are confirmed to be secured by other means -->
                <!--HttpAdminServices>*</HttpAdminServices-->

            </Axis2Config>

            <!--
              The default user roles which will be created when the server
              is started up for the first time.
            -->
            <ServiceUserRoles>
                <Role>
                    <Name>admin</Name>
                    <Description>Default Administrator Role</Description>
                </Role>
                <Role>
                    <Name>user</Name>
                    <Description>Default User Role</Description>
                </Role>
            </ServiceUserRoles>

            <!--
              Configurations related to Carbon Crypto Service which is a crypto framework used inside Carbon products.
            -->
            <CryptoService>

                <Enabled>true</Enabled>

                <!-- The crypto provider which is used for internal data encryption and decryption -->
                <InternalCryptoProviderClassName>org.wso2.carbon.crypto.provider.KeyStoreBasedInternalCryptoProvider</InternalCryptoProviderClassName>

                <!--
                    The crypto provider which is used for the crypto needs which come when communicating with external parties.
                    e.g. Signing, Decrypting.
                -->
                <ExternalCryptoProviderClassName>org.wso2.carbon.core.encryption.KeyStoreBasedExternalCryptoProvider</ExternalCryptoProviderClassName>

                <!--
                    The list of key resolvers which will be used based on the context when handling crypto with external parties.

                    e.g. Resolving the public key of an external entity.
                -->
                <KeyResolvers>
                    <KeyResolver className="org.wso2.carbon.crypto.defaultProvider.resolver.ContextIndependentKeyResolver" priority="-1"/>
                </KeyResolvers>

            </CryptoService>

            <!-- 
              Enable following config to allow Emails as usernames. 	
            -->	    	
            <!--EnableEmailUserName>true</EnableEmailUserName-->
            <!--EnablePasswordTrim>false</EnablePasswordTrim-->
            <!--
              Security configurations
            -->
            <Security>
                <!--
                    KeyStore which will be used for encrypting/decrypting passwords
                    and other sensitive information.
                -->
                <KeyStore>
                    <!-- Keystore file location-->
                    <Location>${carbon.home}/repository/resources/security/wso2carbon.jks</Location>
                    <!-- Keystore type (JKS/PKCS12 etc.)-->
                    <Type>JKS</Type>
                    <!-- Keystore password-->
                    <Password>wso2carbon</Password>
                    <!-- Private Key alias-->
                    <KeyAlias>wso2carbon</KeyAlias>
                    <!-- Private Key password-->
                    <KeyPassword>wso2carbon</KeyPassword>
                </KeyStore>

                <!--
                    The KeyStore which is used for encrypting/decrypting internal data.
                    This block is read by Carbon Crypto Service.
                -->
                <InternalKeyStore>
                    <!-- Keystore file location-->
                    <Location>${carbon.home}/repository/resources/security/wso2carbon.jks</Location>
                    <!-- Keystore type (JKS/PKCS12 etc.)-->
                    <Type>JKS</Type>
                    <!-- Keystore password-->
                    <Password>wso2carbon</Password>
                    <!-- Private Key alias-->
                    <KeyAlias>wso2carbon</KeyAlias>
                    <!-- Private Key password-->
                    <KeyPassword>wso2carbon</KeyPassword>
                </InternalKeyStore>

                <!--
                    System wide trust-store which is used to maintain the certificates of all
                    the trusted parties.
                -->
                <TrustStore>
                    <!-- trust-store file location -->
                    <Location>${carbon.home}/repository/resources/security/client-truststore.jks</Location>
                    <!-- trust-store type (JKS/PKCS12 etc.) -->
                    <Type>JKS</Type>
                    <!-- trust-store password -->
                    <Password>wso2carbon</Password>
                </TrustStore>

                <!--
                    The Authenticator configuration to be used at the JVM level. We extend the
                    java.net.Authenticator to make it possible to authenticate to given servers and 
                    proxies.
                -->
                <NetworkAuthenticatorConfig>
                    <!-- 
                        Below is a sample configuration for a single authenticator. Please note that
                        all child elements are mandatory. Not having some child elements would lead to
                        exceptions at runtime.
                    -->
                    <!-- <Credential> -->
                        <!-- 
                            the pattern that would match a subset of URLs for which this authenticator
                            would be used
                        -->
                        <!-- <Pattern>regularExpression</Pattern> -->
                        <!-- 
                            the type of this authenticator. Allowed values are:
                            1. server
                            2. proxy
                        -->
                        <!-- <Type>proxy</Type> -->
                        <!-- the username used to log in to server/proxy -->
                        <!-- <Username>username</Username> -->
                        <!-- the password used to log in to server/proxy -->
                        <!-- <Password>password</Password> -->
                    <!-- </Credential> -->
                </NetworkAuthenticatorConfig>

                <!--
                The Tomcat realm to be used for hosted Web applications. Allowed value is UserManager.
                If this is set to 'UserManager', the realm will pick users & roles from the system's
                WSO2 User Manager.
                -->
                <TomcatRealm>UserManager</TomcatRealm>

          <!--Option to disable storing of tokens issued by STS-->
          <DisableTokenStore>false</DisableTokenStore>

          <!--
          Security token store class name. If this is not set, default class will be
          org.wso2.carbon.security.util.SecurityTokenStore
          -->
          <!--TokenStoreClassName>org.wso2.carbon.identity.sts.store.DBTokenStore</TokenStoreClassName-->

                <XSSPreventionConfig>
                    <Enabled>true</Enabled>
                    <Rule>allow</Rule>
                    <Patterns>
                        <!--Pattern></Pattern-->
                    </Patterns>
                </XSSPreventionConfig>
            </Security>
        
        <!--Hide unnecessary menu Items--> 
        <HideMenuItemIds> 
        <HideMenuItemId>claim_mgt_menu</HideMenuItemId> 
        <HideMenuItemId>identity_mgt_emailtemplate_menu</HideMenuItemId> 
        <HideMenuItemId>identity_security_questions_menu</HideMenuItemId> 
        </HideMenuItemIds>

            <!--
              The temporary work directory
            -->
            <WorkDirectory>${carbon.home}/tmp/work</WorkDirectory>

            <!--
              House-keeping configuration
            -->
            <HouseKeeping>

                <!--
                  true  - Start House-keeping thread on server startup
                  false - Do not start House-keeping thread on server startup.
                          The user will run it manually as and when he wishes.
                -->
                <AutoStart>true</AutoStart>

                <!--
                  The interval in *minutes*, between house-keeping runs
                -->
                <Interval>10</Interval>

                <!--
                  The maximum time in *minutes*, temp files are allowed to live
                  in the system. Files/directories which were modified more than
                  "MaxTempFileLifetime" minutes ago will be removed by the
                  house-keeping task
                -->
                <MaxTempFileLifetime>30</MaxTempFileLifetime>
            </HouseKeeping>

            <!--
              Configuration for handling different types of file upload & other file uploading related
              config parameters.
              To map all actions to a particular FileUploadExecutor, use
              <Action>*</Action>
            -->
            <FileUploadConfig>
                <!--
                  The total file upload size limit in MB
                -->
                <TotalFileSizeLimit>100</TotalFileSizeLimit>

                <Mapping>
                    <Actions>
                        <Action>keystore</Action>
                        <Action>certificate</Action>
                        <Action>*</Action>
                    </Actions>
                    <Class>org.wso2.carbon.ui.transports.fileupload.AnyFileUploadExecutor</Class>
                </Mapping>

                <Mapping>
                    <Actions>
                        <Action>jarZip</Action>
                    </Actions>
                    <Class>org.wso2.carbon.ui.transports.fileupload.JarZipUploadExecutor</Class>
                </Mapping>
                <Mapping>
                    <Actions>
                        <Action>dbs</Action>
                    </Actions>
                    <Class>org.wso2.carbon.ui.transports.fileupload.DBSFileUploadExecutor</Class>
                </Mapping>
                <Mapping>
                    <Actions>
                        <Action>tools</Action>
                    </Actions>
                    <Class>org.wso2.carbon.ui.transports.fileupload.ToolsFileUploadExecutor</Class>
                </Mapping>
                <Mapping>
                    <Actions>
                        <Action>toolsAny</Action>
                    </Actions>
                    <Class>org.wso2.carbon.ui.transports.fileupload.ToolsAnyFileUploadExecutor</Class>
                </Mapping>
            </FileUploadConfig>

            <!-- FileNameRegEx is used to validate the file input/upload/write-out names.
            e.g.
            <FileNameRegEx>^(?!(?:CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(?:\.[^.])?$)[^&lt;&gt:"/\\|?*\x00-\x1F][^&lt;&gt:"/\\|?*\x00-\x1F\ .]$</FileNameRegEx>
            -->
            <!--<FileNameRegEx></FileNameRegEx>-->

            <!--
              Processors which process special HTTP GET requests such as ?wsdl, ?policy etc.

              In order to plug in a processor to handle a special request, simply add an entry to this
              section.

              The value of the Item element is the first parameter in the query string(e.g. ?wsdl)
              which needs special processing
              
              The value of the Class element is a class which implements
              org.wso2.carbon.transport.HttpGetRequestProcessor
            -->
            <HttpGetRequestProcessors>
                <Processor>
                    <Item>info</Item>
                    <Class>org.wso2.carbon.core.transports.util.InfoProcessor</Class>
                </Processor>
                <Processor>
                    <Item>wsdl</Item>
                    <Class>org.wso2.carbon.core.transports.util.Wsdl11Processor</Class>
                </Processor>
                <Processor>
                    <Item>wsdl2</Item>
                    <Class>org.wso2.carbon.core.transports.util.Wsdl20Processor</Class>
                </Processor>
                <Processor>
                    <Item>xsd</Item>
                    <Class>org.wso2.carbon.core.transports.util.XsdProcessor</Class>
                </Processor>
            </HttpGetRequestProcessors>

            <!-- Deployment Synchronizer Configuration. Enable value to true when running with "svn based" dep sync.
          In master nodes you need to set both AutoCommit and AutoCheckout to true
          and in  worker nodes set only AutoCheckout to true.
            -->
            <DeploymentSynchronizer>
                <Enabled>false</Enabled>
                <AutoCommit>false</AutoCommit>
                <AutoCheckout>true</AutoCheckout>
                <RepositoryType>svn</RepositoryType>
                <SvnUrl>http://svnrepo.example.com/repos/</SvnUrl>
                <SvnUser>username</SvnUser>
                <SvnPassword>password</SvnPassword>
                <SvnUrlAppendTenantId>true</SvnUrlAppendTenantId>
            </DeploymentSynchronizer>

            <!-- Mediation persistence configurations. Only valid if mediation features are available i.e. ESB -->
            <!--<MediationConfig>
                <LoadFromRegistry>false</LoadFromRegistry>
                <SaveToFile>false</SaveToFile>
                <Persistence>enabled</Persistence>
                <RegistryPersistence>enabled</RegistryPersistence>
            </MediationConfig>-->

            <!--
            Server intializing code, specified as implementation classes of org.wso2.carbon.core.ServerInitializer.
            This code will be run when the Carbon server is initialized
            -->
            <ServerInitializers>
                <!--<Initializer></Initializer>-->
            </ServerInitializers>
            
            <!--
            Indicates whether the Carbon Servlet is required by the system, and whether it should be
            registered
            -->
            <RequireCarbonServlet>${require.carbon.servlet}</RequireCarbonServlet>

            <!--
            Carbon H2 OSGI Configuration
            By default non of the servers start.
                name="web" - Start the web server with the H2 Console
                name="webPort" - The port (default: 8082)
                name="webAllowOthers" - Allow other computers to connect
                name="webSSL" - Use encrypted (HTTPS) connections
                name="tcp" - Start the TCP server
                name="tcpPort" - The port (default: 9092)
                name="tcpAllowOthers" - Allow other computers to connect
                name="tcpSSL" - Use encrypted (SSL) connections
                name="pg" - Start the PG server
                name="pgPort"  - The port (default: 5435)
                name="pgAllowOthers"  - Allow other computers to connect
                name="trace" - Print additional trace information; for all servers
                name="baseDir" - The base directory for H2 databases; for all servers  
            -->
            <!--H2DatabaseConfiguration>
                <property name="web" />
                <property name="webPort">8082</property>
                <property name="webAllowOthers" />
                <property name="webSSL" />
                <property name="tcp" />
                <property name="tcpPort">9092</property>
                <property name="tcpAllowOthers" />
                <property name="tcpSSL" />
                <property name="pg" />
                <property name="pgPort">5435</property>
                <property name="pgAllowOthers" />
                <property name="trace" />
                <property name="baseDir">${carbon.home}</property>
            </H2DatabaseConfiguration-->
            <!--Disabling statistics reporter by default-->
            <StatisticsReporterDisabled>true</StatisticsReporterDisabled>

            <!-- Enable accessing Admin Console via HTTP -->
            <!-- EnableHTTPAdminConsole>true</EnableHTTPAdminConsole -->

            <!--
              Default Feature Repository of WSO2 Carbon.
            -->
            <FeatureRepository>
              <RepositoryName>default repository</RepositoryName>
              <RepositoryURL>http://product-dist.wso2.com/p2/carbon/releases/wilkes/</RepositoryURL>
            </FeatureRepository>

            <!--
          Configure API Management
          -->
          <APIManagement>
          
          <!--Uses the embedded API Manager by default. If you want to use an external 
          API Manager instance to manage APIs, configure below  externalAPIManager-->
          
          <Enabled>true</Enabled>
          
          <!--Uncomment and configure API Gateway and 
          Publisher URLs to use external API Manager instance-->
          
          <!--ExternalAPIManager>

            <APIGatewayURL>http://localhost:8281</APIGatewayURL>
            <APIPublisherURL>http://localhost:8281/publisher</APIPublisherURL>

          </ExternalAPIManager-->
          
          <LoadAPIContextsInServerStartup>true</LoadAPIContextsInServerStartup>
          </APIManagement>

        </Server>
      web.xml: |-
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN" "http://java.sun.com/dtd/web-app_2_3.dtd">
        <!--
        ~ Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
        ~
        ~ WSO2 Inc. licenses this file to you under the Apache License,
        ~ Version 2.0 (the "License"); you may not use this file except
        ~ in compliance with the License.
        ~ You may obtain a copy of the License at
        ~
        ~    http://www.apache.org/licenses/LICENSE-2.0
        ~
        ~ Unless required by applicable law or agreed to in writing,
        ~ software distributed under the License is distributed on an
        ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
        ~ KIND, either express or implied.  See the License for the
        ~ specific language governing permissions and limitations
        ~ under the License.
        --><web-app id="WebApp" metadata-complete="true">
            <absolute-ordering/>

            <!-- OWASP CSRFGuard per-application configuration property file location-->
            <context-param>
                <param-name>Owasp.CsrfGuard.Config</param-name>
                <param-value>repository/conf/security/Owasp.CsrfGuard.Carbon.properties</param-value>
            </context-param>

            <servlet id="bridge">
                <servlet-name>bridgeservlet</servlet-name>
                <display-name>Carbon Bridge Servlet</display-name>
                <description>Carbon Bridge Servlet</description>
                <servlet-class>org.wso2.carbon.tomcat.ext.servlet.DelegationServlet</servlet-class>

                <load-on-startup>1</load-on-startup>
            </servlet>

            <!-- OWASP CSRFGuard servlet that serves dynamic token injection JavaScript-->
            <servlet>
                <servlet-name>JavaScriptServlet</servlet-name>
                <servlet-class>org.owasp.csrfguard.servlet.JavaScriptServlet</servlet-class>
            </servlet>

            <servlet-mapping>
                <servlet-name>bridgeservlet</servlet-name>
                <url-pattern>/*</url-pattern>
            </servlet-mapping>
            <!--
              This is required if your application bundles expose JSPs.
            -->
            <servlet-mapping>
                <servlet-name>bridgeservlet</servlet-name>
                <url-pattern>*.jsp</url-pattern>
            </servlet-mapping>

            <servlet-mapping>
                <servlet-name>JavaScriptServlet</servlet-name>
                <url-pattern>/carbon/admin/js/csrfPrevention.js</url-pattern>
            </servlet-mapping>

            <!--This is for performing the character encoding in the JSPs. -->
            <filter>
                <filter-name>CharsetFilter</filter-name>
                <filter-class>org.wso2.carbon.tomcat.ext.filter.CharacterSetFilter</filter-class>
                <init-param>
                    <param-name>requestEncoding</param-name>
                    <param-value>UTF-8</param-value>
                </init-param>
            </filter>

            <!-- OWASP CSRFGuard filter used to validate CSRF token-->
            <filter>
                <filter-name>CSRFGuard</filter-name>
                <filter-class>org.owasp.csrfguard.CsrfGuardFilter</filter-class>
            </filter>

            <!-- Tomcat http header security filter -->
            <filter>
                <filter-name>HttpHeaderSecurityFilter</filter-name>
                <filter-class>org.apache.catalina.filters.HttpHeaderSecurityFilter</filter-class>
                <init-param>
                    <param-name>hstsEnabled</param-name>
                    <param-value>false</param-value>
                </init-param>
            </filter>

            <filter>
                <filter-name>URLBasedCachePreventionFilter</filter-name>
                <filter-class>org.wso2.carbon.ui.filters.cache.URLBasedCachePreventionFilter</filter-class>
            </filter>

            <filter-mapping>
                <filter-name>HttpHeaderSecurityFilter</filter-name>
                <url-pattern>*</url-pattern>
            </filter-mapping>

            <filter-mapping>
                <filter-name>CharsetFilter</filter-name>
                <url-pattern>/*</url-pattern>
            </filter-mapping>

            <filter-mapping>
                <filter-name>CSRFGuard</filter-name>
                <url-pattern>/*</url-pattern>
            </filter-mapping>

            <filter-mapping>
                <filter-name>URLBasedCachePreventionFilter</filter-name>
                <url-pattern>*.jsp</url-pattern>
            </filter-mapping>

            <!-- OWASP CSRFGuard context listener used to read CSRF configuration -->
            <listener>
                <listener-class>org.owasp.csrfguard.CsrfGuardServletContextListener</listener-class>
            </listener>

            <!-- OWASP CSRFGuard session listener used to generate per-session CSRF token -->
            <listener>
                <listener-class>org.owasp.csrfguard.CsrfGuardHttpSessionListener</listener-class>
            </listener>

            <session-config>
                <session-timeout>15</session-timeout>
                <cookie-config>
                    <secure>true</secure>
                </cookie-config>
                <tracking-mode>COOKIE</tracking-mode>
            </session-config>

            <!-- custom error pages -->
            <error-page>
                <error-code>400</error-code>
                <location>/carbon/errors/error_400.html</location>
            </error-page>
            <error-page>
                <error-code>401</error-code>
                <location>/carbon/errors/error_401.html</location>
            </error-page>
            <error-page>
                <error-code>403</error-code>
                <location>/carbon/errors/error_403.html</location>
            </error-page>
            <error-page>
                <error-code>404</error-code>
                <location>/carbon/errors/error_404.html</location>
            </error-page>
            <error-page>
                <error-code>405</error-code>
                <location>/carbon/errors/error_405.html</location>
            </error-page>
            <error-page>
                <error-code>408</error-code>
                <location>/carbon/errors/error_408.html</location>
            </error-page>
            <error-page>
                <error-code>410</error-code>
                <location>/carbon/errors/error_410.html</location>
            </error-page>
            <error-page>
                <error-code>500</error-code>
                <location>/carbon/errors/error_500.html</location>
            </error-page>
            <error-page>
                <error-code>502</error-code>
                <location>/carbon/errors/error_502.html</location>
            </error-page>
            <error-page>
                <error-code>503</error-code>
                <location>/carbon/errors/error_503.html</location>
            </error-page>
            <error-page>
                <error-code>504</error-code>
                <location>/carbon/errors/error_504.html</location>
            </error-page>

            <error-page>
                <location>/carbon/errors/error.html</location>
            </error-page>
        </web-app>
      catalina-server.xml: |-              
        <?xml version='1.0' encoding='utf-8'?>
        <!--
        Licensed to the Apache Software Foundation (ASF) under one or more
        contributor license agreements.  See the NOTICE file distributed with
        this work for additional information regarding copyright ownership.
        The ASF licenses this file to You under the Apache License, Version 2.0
        (the "License"); you may not use this file except in compliance with
        the License.  You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
        -->

        <Server port="8005" shutdown="SHUTDOWN">

          <Service className="org.wso2.carbon.tomcat.ext.service.ExtendedStandardService" name="Catalina">

              <Connector protocol="org.apache.coyote.http11.Http11NioProtocol"
                          port="9763"
                          proxyPort="80"
                          hostname="${URL}"
                          redirectPort="9443"
                          bindOnInit="false"
                          maxHttpHeaderSize="8192"
                          acceptorThreadCount="2"
                          maxThreads="250"
                          minSpareThreads="50"
                          disableUploadTimeout="false"
                          connectionUploadTimeout="120000"
                          maxKeepAliveRequests="200"
                          acceptCount="200"
                          server="WSO2 Carbon Server"
                          compression="on"
                          compressionMinSize="2048"
                          noCompressionUserAgents="gozilla, traviata"
                          compressibleMimeType="text/html,text/javascript,application/x-javascript,application/javascript,application/xml,text/css,application/xslt+xml,text/xsl,image/gif,image/jpg,image/jpeg"
                          URIEncoding="UTF-8">
              </Connector>

              <Connector protocol="org.apache.coyote.http11.Http11NioProtocol"
                          port="9443"
                          proxyPort="443"
                          hostname="${URL}"
                          bindOnInit="false"
                          maxHttpHeaderSize="8192"
                          acceptorThreadCount="2"
                          maxThreads="250"
                          minSpareThreads="50"
                          disableUploadTimeout="false"
                          enableLookups="false"
                          connectionUploadTimeout="120000"
                          maxKeepAliveRequests="200"
                          acceptCount="200"
                          server="WSO2 Carbon Server"
                          compression="on"
                          scheme="https"
                          secure="true"
                          SSLEnabled="true"
                          compressionMinSize="2048"
                          noCompressionUserAgents="gozilla, traviata"
                          compressibleMimeType="text/html,text/javascript,application/x-javascript,application/javascript,application/xml,text/css,application/xslt+xml,text/xsl,image/gif,image/jpg,image/jpeg"
                          URIEncoding="UTF-8"
              >
                  <SSLHostConfig
                          protocols="+TLSv1,+TLSv1.1,+TLSv1.2"
                          sslProtocol="TLS"
                          certificateVerification="false"
                          truststoreFile="${carbon.home}/repository/resources/security/client-truststore.jks"
                          truststorePassword="wso2carbon"
                          truststoreType="JKS"
                  >
                      <Certificate certificateKeystoreFile="${carbon.home}/repository/resources/security/wso2carbon.jks"
                                    certificateKeystorePassword="wso2carbon"
                                    certificateKeystoreType="JKS"
                                    certificateKeyAlias="wso2carbon"
                                    certificateKeyPassword="wso2carbon"
                                    />
                  </SSLHostConfig>
              </Connector>


              <Engine name="Catalina" defaultHost="localhost">

                  <Realm className="org.wso2.carbon.tomcat.ext.realms.CarbonTomcatRealm"/>

                  <Host name="localhost" unpackWARs="true" deployOnStartup="false" autoDeploy="false"
                        appBase="${carbon.home}/repository/deployment/server/webapps/">
                      <Valve className="org.wso2.carbon.tomcat.ext.valves.RequestCorrelationIdValve"
                              headerToCorrelationIdMapping="{'activityid':'Correlation-ID'}" queryToCorrelationIdMapping="{'RelayState':'Correlation-ID'}"/>
                      <Valve className="org.wso2.carbon.tomcat.ext.valves.CarbonContextCreatorValve"/>
                      <Valve className="org.apache.catalina.valves.AccessLogValve" directory="${carbon.home}/repository/logs"
                              prefix="http_access_" suffix=".log"
                              pattern="%h %l %u %t %r %s %b %{Referer}i %{User-Agent}i %T"/>
                      <Valve className="org.wso2.carbon.tomcat.ext.valves.CarbonStuckThreadDetectionValve" threshold="600"/>
                      <Valve className="org.wso2.carbon.tomcat.ext.valves.CompositeValve"/>

          <!-- Authentication and Authorization valve for the rest apis and we can configure context for this in identity.xml  -->
                      <Valve className="org.wso2.carbon.identity.auth.valve.AuthenticationValve"/>
                      <Valve className="org.wso2.carbon.identity.authz.valve.AuthorizationValve"/>
                      <Valve className="org.wso2.carbon.identity.context.rewrite.valve.TenantContextRewriteValve"/>
                      <!--Error pages -->
                      <Valve className="org.apache.catalina.valves.ErrorReportValve" showServerInfo="false" showReport="false"/>
                  </Host>
              </Engine>
          </Service>
        </Server>
      api-manager.xml: |-
        <APIManager>
            <!-- JNDI name of the data source to be used by the API publisher, API store and API
                key manager. This data source should be defined in the master-datasources.xml file
                in conf/datasources directory. -->
            <DataSourceName>jdbc/WSO2AM_DB</DataSourceName>

            <!-- This parameter is used when adding api management capability to other products like GReg, AS, DSS etc.-->
            <GatewayType>Synapse</GatewayType>

            <!-- This parameter is used to enable the securevault support when try to publish endpoint secured APIs. Values should be "true" or "false".
            By default secure vault is disabled.-->
            <EnableSecureVault>false</EnableSecureVault>

            <!-- This parameter is used to enable mutual tls based authentication support for APIs, when this is disabled,
            APIs will be protected with OAuth2 security-->
            <EnableMTLSForAPIs>false</EnableMTLSForAPIs>

            <!-- Authentication manager configuration for API publisher and API store. This is
                a required configuration for both web applications as their user authentication
                logic relies on this. -->
            <AuthManager>
                <!-- Server URL of the Authentication service -->
                <ServerURL>https://localhost:${mgt.transport.https.port}${carbon.context}services/</ServerURL>
                <!-- Admin username for the Authentication manager. -->
                <Username>${admin.username}</Username>
                <!-- Admin password for the Authentication manager. -->
                <Password>${admin.password}</Password>
                <!-- Indicates whether the permissions checking of the user (on the Publisher and Store) should be done
                  via a remote service. The check will be done on the local server when false. -->
                <CheckPermissionsRemotely>false</CheckPermissionsRemotely>
            </AuthManager>

            <JWTConfiguration>
                <!-- Enable/Disable JWT generation. Default is false. -->
                <!-- EnableJWTGeneration>false</EnableJWTGeneration-->

                <!-- Name of the security context header to be added to the validated requests. -->
                <JWTHeader>X-JWT-Assertion</JWTHeader>

                <!-- Fully qualified name of the class that will retrieve additional user claims
                    to be appended to the JWT. If not specified no claims will be appended.If user wants to add all user claims in the
                    jwt token, he needs to enable this parameter.
                    The DefaultClaimsRetriever class adds user claims from the default carbon user store. -->
                <!--ClaimsRetrieverImplClass>org.wso2.carbon.apimgt.impl.token.DefaultClaimsRetriever</ClaimsRetrieverImplClass-->

                <!-- The dialectURI under which the claimURIs that need to be appended to the
                    JWT are defined. Not used with custom ClaimsRetriever implementations. The
                    same value is used in the keys for appending the default properties to the
                    JWT. -->
                <!--ConsumerDialectURI>http://wso2.org/claims</ConsumerDialectURI-->

                <!-- Signature algorithm. Accepts "SHA256withRSA" or "NONE". To disable signing explicitly specify "NONE". -->
                <!--SignatureAlgorithm>SHA256withRSA</SignatureAlgorithm-->

                <!-- This parameter specifies which implementation should be used for generating the Token. JWTGenerator is the
              default implementation provided. -->
                <JWTGeneratorImpl>org.wso2.carbon.apimgt.keymgt.token.JWTGenerator</JWTGeneratorImpl>

                <!-- This parameter specifies which implementation should be used for generating the Token. For URL safe JWT
                    Token generation the implementation is provided in URLSafeJWTGenerator -->
                <!--<JWTGeneratorImpl>org.wso2.carbon.apimgt.keymgt.token.URLSafeJWTGenerator</JWTGeneratorImpl>-->

            </JWTConfiguration>

            <!-- Primary/secondary login configuration for APIstore. If user likes to keep two login attributes in a distributed setup, to login the APIstore,
            he should configure this section. Primary login doesn't have a claimUri associated with it. But secondary login, which is a claim attribute,
            is associated with a claimuri.-->
            <!--LoginConfig>
                    <UserIdLogin  primary="true">
                <ClaimUri></ClaimUri>
                </UserIdLogin>
                <EmailLogin  primary="false">
                    <ClaimUri>http://wso2.org/claims/emailaddress</ClaimUri>
                </EmailLogin>
            </LoginConfig-->

            <!-- Credentials for the API gateway admin server. This configuration
                is mainly used by the API publisher and store to connect to the API gateway and
                create/update published API configurations. -->
            <APIGateway>
                <!-- The environments to which an API will be published -->
                <Environments>
                    <!-- Environments can be of different types. Allowed values are 'hybrid', 'production' and 'sandbox'.
                        An API deployed on a 'production' type gateway will only support production keys
                        An API deployed on a 'sandbox' type gateway will only support sandbox keys
                        An API deployed on a 'hybrid' type gateway will support both production and sandbox keys. -->
                    <!-- api-console element specifies whether the environment should be listed in API Console or not -->
                    <Environment type="hybrid" api-console="true">
                        <Name>Production and Sandbox</Name>
                        <Description>This is a hybrid gateway that handles both production and sandbox token traffic.</Description>
                        <!-- Server URL of the API gateway -->
                        <ServerURL>https://localhost:${mgt.transport.https.port}${carbon.context}services/</ServerURL>
                    <!-- Admin username for the API gateway. -->
                        <Username>${admin.username}</Username>
                        <!-- Admin password for the API gateway.-->
                        <Password>${admin.password}</Password>
                        <!-- Endpoint URLs for the APIs hosted in this API gateway.-->
                        <GatewayEndpoint>http://${URL}.https://${URL}</GatewayEndpoint>
                        <!-- Endpoint of the Websocket APIs hosted in this API Gateway -->
                        <GatewayWSEndpoint>ws://${carbon.local.ip}:9099</GatewayWSEndpoint>
                    </Environment>
                </Environments>
            </APIGateway>

            <CacheConfigurations>
              <!-- Enable/Disable token caching at the Gateway-->
                <EnableGatewayTokenCache>true</EnableGatewayTokenCache>
              <!-- Enable/Disable API resource caching at the Gateway-->
                <EnableGatewayResourceCache>true</EnableGatewayResourceCache>
                <!-- Enable/Disable API key validation information caching at key-management server -->
                <EnableKeyManagerTokenCache>false</EnableKeyManagerTokenCache>
                <!-- This parameter specifies whether Recently Added APIs will be loaded from the cache or not.
                    If there are multiple API modification during a short time period, better to disable cache. -->
                <EnableRecentlyAddedAPICache>false</EnableRecentlyAddedAPICache>
                <!-- This parameter specifies whether scopes are taken from cache or not. If you are modifying application
                subscriptions frequently, modifying the user roles frequently or updating the subscribed APIs frequently, it
                is better to turn-off this cache-->
                <EnableScopeCache>true</EnableScopeCache>
                <!-- This indicates whether the role cache need to enabled in the publisher. If this is disabled, there will
                be a call to key manager to all the calls to API publisher APIs. It is highly recommended to enable this
                cache. However, if the system is in a state, where the role addition and deletion happens seamlessly, the
                cache will be in in-valid state.-->
                <EnablePublisherRoleCache>true</EnablePublisherRoleCache>
                <!-- Enable/Disable token caching at the Product REST APIs-->
                <EnableRESTAPITokenCache>true</EnableRESTAPITokenCache>
                <!-- Expiry time for the apim REST API token cache -->
                <RESTAPITokenCacheExpiry>300</RESTAPITokenCacheExpiry>
              <!-- JWT claims Cache expiry in seconds -->
                <!--JWTClaimCacheExpiry>900</JWTClaimCacheExpiry-->
                <!-- Expiry time for the apim key mgt validation info cache -->
                <!--TokenCacheExpiry>900</TokenCacheExpiry-->
                <!-- GatewayResourceCacheExpiry>3600</GatewayResourceCacheExpiry -->
                <!-- This parameter specifies the expiration time of the TagCache. TagCache will
                    only be created when this element is uncommented. When the specified
                    time duration gets elapsed ,tag cache will get re-generated. -->
                <!--TagCacheDuration>120000</TagCacheDuration-->
                <!-- JWT Claim cache can be disabled only if below config <EnableJWTClaimCache> is set as 'false'. The default
                  value is 'true'.
                  Other than this config, also <EnableGatewayTokenCache> and <EnableKeyManagerTokenCache> should have been set
                  as 'false' to completely disable JWTClaimCache.
                -->
                <EnableJWTClaimCache>true</EnableJWTClaimCache>
            </CacheConfigurations>

            <!--
                API usage tracker configuration used by the StreamProcessor data publisher and
                Google Analytics publisher in API gateway.
            -->
            <Analytics>
                <!-- Enable Analytics for API Manager -->
                <Enabled>false</Enabled>

                <!-- Server URL of the remote StreamProcessor server used to collect statistics. Must
                    be specified in protocol://hostname:port/ format.

                    An event can also be published to multiple Receiver Groups each having 1 or more receivers. Receiver
                    Groups are delimited by curly braces whereas receivers are delimited by commas.
                    Ex - Multiple Receivers within a single group
                    tcp://localhost:7612/,tcp://localhost:7613/,tcp://localhost:7614/

                    Ex - Multiple Receiver Groups with two receivers each
                    {tcp://localhost:7612/,tcp://localhost:7613},{tcp://localhost:7712/,tcp://localhost:7713/} -->
                <StreamProcessorServerURL>{tcp://localhost:7612}</StreamProcessorServerURL>
                <!--StreamProcessorAuthServerURL>{ssl://localhost:7712}</StreamProcessorAuthServerURL-->
                <!-- Administrator username to login to the remote StreamProcessor server. -->
                <StreamProcessorUsername>${admin.username}</StreamProcessorUsername>
                <!-- Administrator password to login to the remote StreamProcessor server. -->
                <StreamProcessorPassword>${admin.password}</StreamProcessorPassword>

                <!-- For APIM implemented Statistic client for RDBMS -->
                <StatsProviderImpl>org.wso2.carbon.apimgt.usage.client.impl.APIUsageStatisticsRestClientImpl</StatsProviderImpl>

                <!-- StreamProcessor REST API configuration -->
                <StreamProcessorRestApiURL>https://localhost:7444</StreamProcessorRestApiURL>
                <StreamProcessorRestApiUsername>${admin.username}</StreamProcessorRestApiUsername>
                <StreamProcessorRestApiPassword>${admin.password}</StreamProcessorRestApiPassword>

                <!-- Below property is used to skip trying to connect to event receiver nodes when publishing events even if
                    the stats enabled flag is set to true. -->
                <SkipEventReceiverConnection>false</SkipEventReceiverConnection>

                <!--Skip workflow data publisher initiation and even publishing-->
                <SkipWorkflowEventPublisher>false</SkipWorkflowEventPublisher>

                <!-- API Usage Data Publisher. -->
                <PublisherClass>org.wso2.carbon.apimgt.usage.publisher.APIMgtUsageDataBridgeDataPublisher</PublisherClass>

                <!-- If below property set to true,then the response message size will be calculated and publish
                    with each successful API invocation event. -->
                <PublishResponseMessageSize>false</PublishResponseMessageSize>
                <!-- Data publishing stream names and versions of API requests, responses and faults. If the default values
                    are changed, the toolbox also needs to be changed accordingly. -->
                <Streams>
                    <Request>
                        <Name>org.wso2.apimgt.statistics.request</Name>
                        <Version>3.0.0</Version>
                    </Request>
                    <Fault>
                        <Name>org.wso2.apimgt.statistics.fault</Name>
                        <Version>3.0.0</Version>
                    </Fault>
                    <Throttle>
                        <Name>org.wso2.apimgt.statistics.throttle</Name>
                        <Version>3.0.0</Version>
                    </Throttle>
                    <Workflow>
                        <Name>org.wso2.apimgt.statistics.workflow</Name>
                        <Version>1.0.0</Version>
                    </Workflow>
                  <AlertTypes>
                        <Name>org.wso2.analytics.apim.alertStakeholderInfo</Name>
                        <Version>1.0.1</Version>
                    </AlertTypes>
                    <botData>
                        <Name>org.wso2.botDetectionData.request.stream</Name>
                        <Version>1.0.0</Version>
                    </botData>
                </Streams>

            </Analytics>

            <!--
                API key validator configuration used by API key manager (IS), API store and API gateway.
                API gateway uses it to validate and authenticate users against the provided API keys.
            -->
            <APIKeyValidator>
                <!-- Server URL of the API key manager -->
                <ServerURL>https://localhost:${mgt.transport.https.port}${carbon.context}services/</ServerURL>

                <!-- Admin username for API key manager. -->
                <Username>${admin.username}</Username>
                <!-- Admin password for API key manager. -->
                <Password>${admin.password}</Password>

                <KeyValidatorClientType>WSClient</KeyValidatorClientType>
                <!--ConnectionPool>
                    <MaxIdle>100</MaxIdle>
                    <InitIdleCapacity>50</InitIdleCapacity>
                </ConnectionPool-->
                <!-- Specifies the implementation to be used for KeyValidationHandler. Steps for validating a token can be controlled by plugging in a
                    custom KeyValidation Handler -->
                <KeyValidationHandlerClassName>org.wso2.carbon.apimgt.keymgt.handlers.DefaultKeyValidationHandler</KeyValidationHandlerClassName>
            </APIKeyValidator>

            <!-- Uncomment this section only if you are going to have an instance other than KeyValidator as your KeyManager.
                Unless a ThirdParty KeyManager is used, you don't need to configure this section. -->
            <!--APIKeyManager>
                <KeyManagerClientImpl>org.wso2.carbon.apimgt.impl.AMDefaultKeyManagerImpl</KeyManagerClientImpl>
                <Configuration>
                    <ServerURL>https://localhost:${mgt.transport.https.port}${carbon.context}services/</ServerURL>
                    <Username>${admin.username}</Username>
                    <Password>${admin.password}</Password>
                    <TokenURL>https://${carbon.local.ip}:${https.nio.port}/token</TokenURL>
                    <RevokeURL>https://${carbon.local.ip}:${https.nio.port}/revoke</RevokeURL>
                </Configuration>
            </APIKeyManager-->

            <OAuthConfigurations>
                <!-- Remove OAuth headers from outgoing message. -->
                <!--RemoveOAuthHeadersFromOutMessage>true</RemoveOAuthHeadersFromOutMessage-->
                <!--Authorization header-->
                <!--AuthorizationHeader>Authorization</AuthorizationHeader-->
                <!-- Scope used for marking Application Tokens. If a token is generated with this scope, they will be treated as Application Access Tokens -->
                <ApplicationTokenScope>am_application_scope</ApplicationTokenScope>
                <!-- All  scopes under the ScopeWhitelist element are not validating against roles that has assigned to it.
                    By default ^device_.* and openid scopes have been white listed internally. -->
                <!--ScopeWhitelist>
                    <Scope>^device_.*</Scope>
                    <Scope>openid</Scope>
                </ScopeWhitelist-->
                <!-- Name of the token API -->
                <TokenEndPointName>/oauth2/token</TokenEndPointName>
                <!-- This the API URL for revoke API. When we revoke tokens revoke requests should go through this
                    API deployed in API gateway. Then it will do cache invalidations related to revoked tokens.
                    In distributed deployment we should configure this property in key manager node by pointing
                    gateway https( /http, we recommend users to use 'https' endpoints for security purpose) url.
                    Also please note that we should point gateway revoke service to key manager -->
                <RevokeAPIURL>https://localhost:${https.nio.port}/revoke</RevokeAPIURL>
                <!-- Whether to encrypt tokens when storing in the Database
                Note: If changing this value to true, change the value of <TokenPersistenceProcessor> to
                org.wso2.carbon.identity.oauth.tokenprocessor.EncryptionDecryptionPersistenceProcessor in the identity.xml -->
                <EncryptPersistedTokens>false</EncryptPersistedTokens>
                <!-- Whether to hash the tokens when storing in the Database
                Note: If changing this value to true, change the value of <TokenPersistenceProcessor> to
                org.wso2.carbon.identity.oauth.tokenprocessor.HashingPersistenceProcessor and change the value of
                <EnableClientSecretHash> to true in the identity.xml -->
                <EnableTokenHashMode>false</EnableTokenHashMode>
            </OAuthConfigurations>

            <TokenRevocationNotifiers class="org.wso2.carbon.apimgt.keymgt.events.TokenRevocationNotifierImpl">
                <RealtimeNotifier>
                    <Property name="ttl">5000</Property>
                </RealtimeNotifier>
                <PersistentNotifier>
                    <Property name="hostname">https://localhost:2379/v2/keys/jti/</Property>
                    <Property name="ttl">5000</Property>
                    <Property name="username">root</Property>
                    <Property name="password">root</Property>
                </PersistentNotifier>
            </TokenRevocationNotifiers>

            <!-- Settings related to managing API access tiers. -->
            <TierManagement>
                <!-- Enable the providers to expose their APIs over the special 'Unlimited' tier which
                    basically disables tier based throttling for the specified APIs. -->
                <EnableUnlimitedTier>true</EnableUnlimitedTier>
            </TierManagement>

            <!-- API Store Related Configurations -->
            <APIStore>
                <!--GroupingExtractor>org.wso2.carbon.apimgt.impl.DefaultGroupIDExtractorImpl</GroupingExtractor-->
                <!--This is used to define the group Id Extractor for REST API. Default value for this is DefaultGroupIDExtractorImpl-->
                <!--RESTApiGroupingExtractor>org.wso2.carbon.apimgt.impl.DefaultGroupIDExtractorImpl</RESTApiGroupingExtractor-->
                <!--This property is used to indicate how we do user name comparision for token generation https://wso2.org/jira/browse/APIMANAGER-2225-->
                <CompareCaseInsensitively>true</CompareCaseInsensitively>
                <DisplayURL>false</DisplayURL>
                <URL>https://localhost:${mgt.transport.https.port}/devportal</URL>

                <!-- Server URL of the API Store. -->
                <ServerURL>https://localhost:${mgt.transport.https.port}${carbon.context}services/</ServerURL>
                <!-- Admin username for API Store. -->
                <Username>${admin.username}</Username>

                <!-- Admin password for API Store. -->
                <Password>${admin.password}</Password>
                <!-- This parameter specifies whether to display multiple versions of same
                    API or only showing the latest version of an API. -->
                <DisplayMultipleVersions>false</DisplayMultipleVersions>
                <!-- This parameter specifies whether to display all the APIs
                    [which are having DEPRECATED/PUBLISHED status] or only display the APIs
                    with having their status is as 'PUBLISHED' -->
                <DisplayAllAPIs>false</DisplayAllAPIs>
                <!-- Uncomment this to limit the number of APIs in api the API Store -->
                <!--APIsPerPage>5</APIsPerPage-->

                <!-- This parameter specifies whether to display the comment editing facility or not.
                    Default is "true". If user wants to disable, he must set this param as "false" -->
                <DisplayComments>true</DisplayComments>

                <!-- This parameter specifies whether to display the ratings  or not.
                    Default is "true". If user wants to disable, he must set this param as "false" -->
                <DisplayRatings>true</DisplayRatings>

                <!-- This parameter specifies the  alias value of the Api Key which will be used for Api Key Authentication  -->
                <ApiKeyAlias>gateway_certificate_alias</ApiKeyAlias>

                <!--set isStoreForumEnabled to false for disable forum in store-->
                <!--isStoreForumEnabled>false</isStoreForumEnabled-->

                <!--
                This is an optional parameter. If this parameter has a value, it will be shown in the token generation
                cURL command under subscriptions section in API Store.
                -->
                <!--StoreTokenDisplayURL>https://${carbon.local.ip}:${https.nio.port}</StoreTokenDisplayURL-->
            </APIStore>

            <APIPublisher>
                <DisplayURL>false</DisplayURL>
                <URL>https://localhost:${mgt.transport.https.port}/publisher</URL>
                <!-- This parameter specifies enabling the capability of setting API documentation level granular visibility levels.
                    By default any document associate with an API will have the same permissions set as the API.With enabling below
                    property,it will show two additional permission levels as visible only to all registered users in a particular
                    domain or only visible to API doc creator -->
                <!--EnableAPIDocVisibilityLevels>true</EnableAPIDocVisibilityLevels-->
                <!-- Uncomment this to limit the number of APIs in api the API Publisher -->
                <!--APIsPerPage>30</APIsPerPage-->
                <!-- This property need to be enabled to enable the publisher access control support -->
                <EnableAccessControl>true</EnableAccessControl>
            </APIPublisher>

            <!-- Status observers can be registered against the API Publisher to listen for
                API status update events. Each observer must implement the APIStatusObserver
                interface. Multiple observers can be engaged if necessary and in such situations
                they will be notified in the order they are defined here.
                This configuration is unused from API Manager version 1.10.0 -->
            <!--StatusObservers>
                <Observer>org.wso2.carbon.apimgt.impl.observers.SimpleLoggingObserver</Observer>
            </StatusObservers-->

            <!-- Configuration to enable/disable sending CORS headers in the Gateway response
                and define the Access-Control-Allow-Origin header value.-->
            <CORSConfiguration>
                <!-- Configuration to enable/disable sending CORS headers from the Gateway-->
                <Enabled>true</Enabled>

                <!-- The value of the Access-Control-Allow-Origin header. Default values are
                    API Store addresses, which is needed for swagger to function. -->
                <Access-Control-Allow-Origin>*</Access-Control-Allow-Origin>

                <!-- Configure Access-Control-Allow-Methods -->
                <Access-Control-Allow-Methods>GET,PUT,POST,DELETE,PATCH,OPTIONS</Access-Control-Allow-Methods>

                <!-- Configure Access-Control-Allow-Headers -->
                <Access-Control-Allow-Headers>authorization,Access-Control-Allow-Origin,Content-Type,SOAPAction</Access-Control-Allow-Headers>

                <!--<Access-Control-Expose-Headers>Cache-Control,Content-Language,Content-Type,Expires,Last-Modified,Pragma</Access-Control-Expose-Headers>-->

                <!-- Configure Access-Control-Allow-Credentials -->
                <!-- Specifying this header to true means that the server allows cookies (or other user credentials) to be included on cross-origin requests.
                    It is false by default and if you set it to true then make sure that the Access-Control-Allow-Origin header does not contain the wildcard (*) -->
                <Access-Control-Allow-Credentials>false</Access-Control-Allow-Credentials>
            </CORSConfiguration>

            <!-- This property is there to configure velocity log output into existing Log4j carbon Logger.
                You can enable this and set preferable Logger name. -->
            <!-- VelocityLogger>VELOCITY</VelocityLogger -->

            <RESTAPI>
                <!--Configure white-listed URIs of REST API. Accessing white-listed URIs does not require credentials (does not require Authorization header). -->
                <WhiteListedURIs>
                    <WhiteListedURI>
                        <URI>/api/am/publisher/{version}/swagger.json</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/swagger.json</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/admin/{version}/swagger.json</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/publisher/{version}/swagger.yaml</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/swagger.yaml</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/admin/{version}/swagger.yaml</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/apis</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/apis/{apiId}</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/apis/{apiId}/swagger</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/apis/{apiId}/documents</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/apis/{apiId}/documents/{documentId}</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/apis/{apiId}/documents/{documentId}/content</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/apis/{apiId}/thumbnail</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/tags</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/tiers/{tierLevel}</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/tiers/{tierLevel}/{tierName}</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/search</URI>
                        <HTTPMethods>GET</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/settings</URI>
                        <HTTPMethods>GET</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/publisher/{version}/settings</URI>
                        <HTTPMethods>GET</HTTPMethods>
                    </WhiteListedURI>
                                <WhiteListedURI>
                        <URI>/api/am/store/{version}/api-products</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/api-products/{apiProductId}</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/api-products/{apiProductId}/swagger</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/api-products/{apiProductId}/documents</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/api-products/{apiProductId}/documents/{documentId}</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/api-products/{apiProductId}/documents/{documentId}/content</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                    <WhiteListedURI>
                        <URI>/api/am/store/{version}/api-products/{apiProductId}/thumbnail</URI>
                        <HTTPMethods>GET,HEAD</HTTPMethods>
                    </WhiteListedURI>
                </WhiteListedURIs>
                <ETagSkipList>
                    <ETagSkipURI>
                        <URI>/api/am/store/{version}/apis</URI>
                        <HTTPMethods>GET</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/store/{version}/apis/generate-sdk</URI>
                        <HTTPMethods>POST</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/store/{version}/apis/{apiId}/documents</URI>
                        <HTTPMethods>GET</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/store/{version}/applications</URI>
                        <HTTPMethods>GET</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/store/{version}/applications/generate-keys</URI>
                        <HTTPMethods>POST</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/store/{version}/subscriptions</URI>
                        <HTTPMethods>GET,POST</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/store/{version}/tags</URI>
                        <HTTPMethods>GET</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/store/{version}/tiers/{tierLevel}</URI>
                        <HTTPMethods>GET</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/store/{version}/tiers/{tierLevel}/{tierName}</URI>
                        <HTTPMethods>GET</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/apis</URI>
                        <HTTPMethods>GET,POST</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/apis/{apiId}</URI>
                        <HTTPMethods>GET,DELETE,PUT</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/apis/{apiId}/swagger</URI>
                        <HTTPMethods>GET,PUT</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/apis/{apiId}/thumbnail</URI>
                        <HTTPMethods>GET,POST</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/apis/{apiId}/change-lifecycle</URI>
                        <HTTPMethods>POST</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/apis/{apiId}/copy-api</URI>
                        <HTTPMethods>POST</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/applications/{applicationId}</URI>
                        <HTTPMethods>GET</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/apis/{apiId}/documents</URI>
                        <HTTPMethods>GET,POST</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/apis/{apiId}/documents/{documentId}/content</URI>
                        <HTTPMethods>GET,POST</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/apis/{apiId}/documents/{documentId}</URI>
                        <HTTPMethods>GET,PUT,DELETE</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/environments</URI>
                        <HTTPMethods>GET</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/subscriptions</URI>
                        <HTTPMethods>GET</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/subscriptions/block-subscription</URI>
                        <HTTPMethods>POST</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/subscriptions/{subscriptionId}</URI>
                        <HTTPMethods>GET</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/subscriptions/unblock-subscription</URI>
                        <HTTPMethods>POST</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/tiers/{tierLevel}</URI>
                        <HTTPMethods>GET,POST</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/tiers/{tierLevel}/{tierName}</URI>
                        <HTTPMethods>GET,PUT,DELETE</HTTPMethods>
                    </ETagSkipURI>
                    <ETagSkipURI>
                        <URI>/api/am/publisher/{version}/tiers/update-permission</URI>
                        <HTTPMethods>POST</HTTPMethods>
                    </ETagSkipURI>
                </ETagSkipList>
            </RESTAPI>
            <ThrottlingConfigurations>
                <EnableAdvanceThrottling>true</EnableAdvanceThrottling>
                <TrafficManager>
                    <Type>Binary</Type>
                    <ReceiverUrlGroup>tcp://${carbon.local.ip}:${receiver.url.port}</ReceiverUrlGroup>
                    <AuthUrlGroup>ssl://${carbon.local.ip}:${auth.url.port}</AuthUrlGroup>
                    <Username>${admin.username}</Username>
                    <Password>${admin.password}</Password>
                </TrafficManager>
                <DataPublisher>
                    <Enabled>true</Enabled>
                    <DataPublisherPool>
                        <MaxIdle>1000</MaxIdle>
                        <InitIdleCapacity>200</InitIdleCapacity>
                    </DataPublisherPool>
                    <DataPublisherThreadPool>
                        <CorePoolSize>200</CorePoolSize>
                        <MaxmimumPoolSize>1000</MaxmimumPoolSize>
                        <KeepAliveTime>200</KeepAliveTime>
                    </DataPublisherThreadPool>
                </DataPublisher>
                <PolicyDeployer>
                    <Enabled>true</Enabled>
                    <ServiceURL>https://localhost:${mgt.transport.https.port}${carbon.context}services/</ServiceURL>
                    <Username>${admin.username}</Username>
                    <Password>${admin.password}</Password>
                </PolicyDeployer>
                <BlockCondition>
                    <ServiceURL>http://${carbon.local.ip}:${mgt.transport.http.port}/throttle/data/v1</ServiceURL>
                    <Enabled>true</Enabled>
                    <!--InitDelay>300000</InitDelay>
                    <Period>3600000</Period-->
                </BlockCondition>
                <JMSConnectionDetails>
                    <Enabled>true</Enabled>
                    <Destination>throttleData</Destination>
                    <!--InitDelay>300000</InitDelay-->
                    <JMSConnectionParameters>
                        <transport.jms.ConnectionFactoryJNDIName>TopicConnectionFactory</transport.jms.ConnectionFactoryJNDIName>
                        <transport.jms.DestinationType>topic</transport.jms.DestinationType>
                        <java.naming.factory.initial>org.wso2.andes.jndi.PropertiesFileInitialContextFactory</java.naming.factory.initial>
                        <connectionfactory.TopicConnectionFactory>amqp://${admin.username}:${admin.password}@clientid/carbon?brokerlist='tcp://${carbon.local.ip}:${jms.port}'</connectionfactory.TopicConnectionFactory>
                    </JMSConnectionParameters>
                </JMSConnectionDetails>

                <!--DefaultLimits>
                    <SubscriptionTierLimits>
                        <Gold>5000</Gold>
                        <Silver>2000</Silver>
                        <Bronze>1000</Bronze>
                        <Unauthenticated>60</Unauthenticated>
                    </SubscriptionTierLimits>
                    <ApplicationTierLimits>
                        <50PerMin>50</50PerMin>
                        <20PerMin>20</20PerMin>
                        <10PerMin>10</10PerMin>
                    </ApplicationTierLimits>
                    <ResourceLevelTierLimits>
                        <50KPerMin>50000</50KPerMin>
                        <20KPerMin>20000</20KPerMin>
                        <10KPerMin>10000</10KPerMin>
                    </ResourceLevelTierLimits>
                </DefaultLimits-->
                <EnableUnlimitedTier>true</EnableUnlimitedTier>
                <EnableHeaderConditions>false</EnableHeaderConditions>
                <EnableJWTClaimConditions>false</EnableJWTClaimConditions>
                <EnableQueryParamConditions>false</EnableQueryParamConditions>
            </ThrottlingConfigurations>

            <WorkflowConfigurations>
                <Enabled>false</Enabled>
              <ServerUrl>https://localhost:9445/bpmn</ServerUrl>
              <ServerUser>${admin.username}</ServerUser>
              <ServerPassword>${admin.password}</ServerPassword>
              <WorkflowCallbackAPI>https://localhost:${mgt.transport.https.port}/api/am/publisher/v0.15/workflows/update-workflow-status</WorkflowCallbackAPI>
                <TokenEndPoint>https://localhost:${https.nio.port}/token</TokenEndPoint>
                <DCREndPoint>https://localhost:${mgt.transport.https.port}/client-registration/v0.15/register</DCREndPoint>
                <DCREndPointUser>${admin.username}</DCREndPointUser>
                <DCREndPointPassword>${admin.password}</DCREndPointPassword>
            </WorkflowConfigurations>

            <SwaggerCodegen>
                <ClientGeneration>
                    <GroupId>org.wso2</GroupId>
                    <ArtifactId>org.wso2.client.</ArtifactId>
                    <ModelPackage>org.wso2.client.model.</ModelPackage>
                    <ApiPackage>org.wso2.client.api.</ApiPackage>
                    <!-- Configure supported languages/Frameworks as comma separated values,
                    Supported Languages/Frameworks : android, java, scala, csharp, dart, flash, groovy, javascript, jmeter,
                    nodejs, perl, php, python, ruby, swift, clojure, asyncScala, csharpDotNet2-->
                    <SupportedLanguages>java,android</SupportedLanguages>
                </ClientGeneration>
            </SwaggerCodegen>

            <!--Specify the implementation class of the monetization interface-->
            <Monetization>
                <MonetizationImpl>org.wso2.carbon.apimgt.impl.monetization.DefaultMonetizationImpl</MonetizationImpl>
                <UsagePublisher>
                    <Granularity>days</Granularity>
                    <!--Number of days to reduce from the current time to get the last publish time of monetization
                    usgae publish job, when there is no record of the last publish time.-->
                    <PublishTimeDurationInDays>1</PublishTimeDurationInDays>
                </UsagePublisher>
            </Monetization>

            <OpenTracer>
                <RemoteTracer>
                    <Enabled>false</Enabled>
                    <Name>zipkin</Name>
                    <Properties>
                        <HostName>localhost</HostName>
                        <Port>9411</Port>
                    </Properties>
                </RemoteTracer>
                <LogTracer>
                    <Enabled>false</Enabled>
                </LogTracer>
            </OpenTracer>

        </APIManager>
      site-publisher.json: |-
        {
        "reverseProxy" : {

                "enabled" : true,    // values true , false , "auto" - will look for  X-Forwarded-* headers

                "host" : "${URL}", // If reverse proxy do not have a domain name use IP

                "context":"/publisher",

                "regContext":""

            }
        }     
      site-admin.json: |-
        {
        "theme": {
          "base": "wso2",
          "subtheme": "modern"
        },
        "context": "/admin",
        "request_url": "READ_FROM_REQUEST",
        "tasksPerPage": 10,
        "allowedPermission": "/permission/admin/manage/apim_admin",
        "workflows": {
          "workFlowServerURL": "https://<BPSHost>:<BPSPort>/services/",
        },
        "ssoConfiguration": {
          "enabled": "false",
          "issuer": "API_WORKFLOW_ADMIN",
          "identityProviderURL": "https://localhost:9443/samlsso",
          "keyStorePassword": "",
          "identityAlias": "",
          "keyStoreName": "",
          "verifyAssertionValidityPeriod": "true",
          "audienceRestrictionsEnabled": "true",
          "responseSigningEnabled": "true",
          "assertionSigningEnabled": "true",
          "assertionEncryptionEnabled": "false",
          "signRequests" : "true",
          "idpInit" : "false",
          "idpInitSSOURL" : "https://localhost:9443/samlsso?spEntityID=API_WORKFLOW_ADMIN",
          "externalLogoutPage" : "https://localhost:9443/samlsso?slo=true",
          "loginUserNameAttribute" : ""
        },
        "reverseProxy": {
          "enabled": true,
          // values true , false , "auto" - will look for  X-Forwarded-* headers
          "host": "${URL}",
          // If reverse proxy do not have a domain name use IP
          "context": ""
          //"regContext":"" // Use only if different path is used for registry
        },
        "whiteListedHostNames" : ["localhost"],
        "enableLogAnalyzer" : false
        }
      axis2.xml: |-
        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!--
          ~  Copyright (c) 2005-2010, WSO2 Inc. (http://wso2.com) All Rights Reserved.
          ~
          ~  WSO2 Inc. licenses this file to you under the Apache License,
          ~  Version 2.0 (the "License"); you may not use this file except
          ~  in compliance with the License.
          ~  You may obtain a copy of the License at
          ~
          ~    http://www.apache.org/licenses/LICENSE-2.0
          ~
          ~  Unless required by applicable law or agreed to in writing,
          ~  software distributed under the License is distributed on an
          ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
          ~  KIND, either express or implied.  See the License for the
          ~  specific language governing permissions and limitations
          ~  under the License.
          -->

        <axisconfig name="AxisJava2.0">

            <!-- ================================================= -->
            <!--                  Parameters                       -->
            <!-- ================================================= -->

            <!-- Change this to true if you want to enable hot deployment of services -->
            <parameter name="hotdeployment" locked="false">true</parameter>
            <!-- Change this to true if you want to enable hot update of services -->
            <parameter name="hotupdate" locked="false">true</parameter>

            <!-- Change this to true if you want to enable MTOM -->
            <parameter name="enableMTOM" locked="false">false</parameter>
            <!-- Change this to true if you want to enable SwA -->
            <parameter name="enableSwA" locked="false">false</parameter>

            <!-- If you want to enable file caching for attachments change this to true -->
            <parameter name="cacheAttachments" locked="false">false</parameter>
            <!-- Attachment file caching location relative to CARBON_HOME -->
            <parameter name="attachmentDIR" locked="false">work/mtom</parameter>
            <!-- Attachment file cache threshold size -->
            <parameter name="sizeThreshold" locked="false">4000</parameter>

            <!-- Completely disable REST handling in Axis2/Synapse if the value is true -->
            <parameter name="disableREST" locked="false">false</parameter>

            <!-- Sandesha2 persistance storage manager -->
            <parameter name="Sandesha2StorageManager" locked="false">inmemory</parameter>

            <!-- Our HTTP endpoints can handle both REST and SOAP under the following service path. In -->
            <!-- case of a servlet container, if you change this you have to manually change the -->
            <!-- settings of your servlet container to map this context path to proper Axis2 servlets -->
            <parameter name="servicePath" locked="false">services</parameter>

            <!--the directory in which .aar services are deployed inside axis2 repository-->
            <parameter name="ServicesDirectory">axis2services</parameter>

            <!--the directory in which modules are deployed inside axis2 repository-->
            <parameter name="ModulesDirectory">axis2modules</parameter>

            <!-- User agent and the server details to be used in the http communication -->
            <parameter name="userAgent" locked="true">WSO2 AM 2.1.0</parameter>
            <parameter name="server" locked="true">WSO2 AM 2.1.0</parameter>

            <!-- During a fault, stacktrace can be sent with the fault message. The following flag -->
            <!-- will control that behaviour -->
            <parameter name="sendStacktraceDetailsWithFaults" locked="false">false</parameter>

            <!-- If there aren't any information available to find out the fault reason, we set the -->
            <!-- message of the exception as the faultreason/Reason. But when a fault is thrown from -->
            <!-- a service or some where, it will be wrapped by different levels. Due to this the -->
            <!-- initial exception message can be lost. If this flag is set then, Axis2 tries to get -->
            <!-- the first exception and set its message as the faultreason/Reason. -->
            <parameter name="DrillDownToRootCauseForFaultReason" locked="false">false</parameter>

            <!-- Set the flag to true if you want to enable transport level session management -->
            <parameter name="manageTransportSession" locked="false">true</parameter>

            <!-- This will give out the timout of the configuration contexts, in milliseconds -->
            <parameter name="ConfigContextTimeoutInterval" locked="false">30000</parameter>

            <!-- Synapse Configuration file location relative to CARBON_HOME -->
            <parameter name="SynapseConfig.ConfigurationFile" locked="false">repository/deployment/server/synapse-configs</parameter>
            <!-- Synapse Home parameter -->
            <parameter name="SynapseConfig.HomeDirectory" locked="false">.</parameter>
            <!-- Resolve root used to resolve synapse references like schemas inside a WSDL -->
            <parameter name="SynapseConfig.ResolveRoot" locked="false">.</parameter>
            <!-- Synapse Server name parameter -->
            <parameter name="SynapseConfig.ServerName" locked="false">localhost</parameter>

            <!-- To override repository/services you need to uncomment following parameter and value -->
            <!-- SHOULD be absolute file path. -->
            <!--<parameter name="ServicesDirectory" locked="false">service</parameter>-->

            <!-- To override repository/modules you need to uncomment following parameter and value -->
            <!-- SHOULD be absolute file path. -->
            <!--<parameter name="ModulesDirectory" locked="false">modules</parameter>-->

            <!-- If you have a frontend host which exposes this webservice using a different public URL -->
            <!-- use this parameter to override autodetected url -->
            <!--<parameter name="httpFrontendHostUrl" locked="false">https://someotherhost/context</parameter>-->

            <!-- ================================================= -->
            <!--                  Listeners                        -->
            <!-- ================================================= -->

            <!-- This deployment interceptor will be called whenever before a module is initialized or -->
            <!-- service is deployed -->
            <listener class="org.wso2.carbon.core.deployment.DeploymentInterceptor"/>

            <!-- ================================================= -->
            <!--                  Deployers                        -->
            <!-- ================================================= -->

            <!-- Deployer for the dataservice. -->
            <!--<deployer extension="dbs" directory="dataservices" class="org.wso2.dataservices.DBDeployer"/>-->

            <!-- Axis1 deployer for Axis2 -->
            <!--<deployer extension="wsdd" class="org.wso2.carbon.axis1services.Axis1Deployer" directory="axis1services"/>-->

            <!-- POJO service deployer for Jar -->
            <!--<deployer extension="jar" class="org.apache.axis2.deployment.POJODeployer" directory="pojoservices"/>-->

            <!-- POJO service deployer for Class -->
            <!--<deployer extension="class" class="org.apache.axis2.deployment.POJODeployer" directory="pojoservices"/>-->

            <!-- JAXWS service deployer -->
            <!--<deployer extension=".jar" class="org.apache.axis2.jaxws.framework.JAXWSDeployer" directory="servicejars"/>-->

            <!-- ================================================= -->
            <!--                Message Receivers                  -->
            <!-- ================================================= -->

            <!-- This is the set of default Message Receivers for the system, if you want to have -->
            <!-- message receivers for any of the other Message exchange Patterns (MEP) implement it -->
            <!-- and add the implementation class to here, so that you can refer from any operation -->
            <!-- Note : You can override this for particular service by adding this same element to the -->
            <!-- services.xml with your preferences -->
            <messageReceivers>
                <messageReceiver mep="http://www.w3.org/ns/wsdl/in-only"
                                class="org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver"/>
                <messageReceiver mep="http://www.w3.org/ns/wsdl/robust-in-only"
                                class="org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver"/>
                <messageReceiver mep="http://www.w3.org/ns/wsdl/in-out"
                                class="org.apache.axis2.rpc.receivers.RPCMessageReceiver"/>
            </messageReceivers>

            <!-- ================================================= -->
            <!--                Message Formatters                 -->
            <!-- ================================================= -->

            <!-- Following content type to message formatter mapping can be used to implement support -->
            <!-- for different message format serializations in Axis2. These message formats are -->
            <!-- expected to be resolved based on the content type. -->
            <messageFormatters>
              <messageFormatter contentType="application/x-www-form-urlencoded"
                                  class="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
                <messageFormatter contentType="multipart/form-data"
                                  class="org.apache.axis2.transport.http.MultipartFormDataFormatter"/>
                <messageFormatter contentType="text/html"
                                  class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
                <messageFormatter contentType="application/xml"
                                  class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
                <messageFormatter contentType="text/xml"
                                class="org.apache.axis2.transport.http.SOAPMessageFormatter"/>
                <messageFormatter contentType="application/soap+xml"
                                class="org.apache.axis2.transport.http.SOAPMessageFormatter"/>
                <messageFormatter contentType="text/plain"
                                class="org.apache.axis2.format.PlainTextFormatter"/>

                <!--JSON Message Formatters-->
                <messageFormatter contentType="application/json"
                                  class="org.apache.synapse.commons.json.JsonStreamFormatter"/>
                <!--messageFormatter contentType="application/json"
                                  class="org.apache.synapse.commons.json.JsonFormatter"/-->
                <messageFormatter contentType="application/json/badgerfish"
                                  class="org.apache.axis2.json.JSONBadgerfishMessageFormatter"/>
                <messageFormatter contentType="text/javascript"
                                  class="org.apache.axis2.json.JSONMessageFormatter"/>
                <messageFormatter contentType="application/octet-stream" 
                                  class="org.wso2.carbon.relay.ExpandingMessageFormatter"/>

                <!-- See https://wso2.org/jira/browse/ESBJAVA-1725 before enabling bellow line -->
                <!--messageFormatter contentType=".*"
                                class="org.wso2.carbon.relay.ExpandingMessageFormatter"/-->

                <!--messageFormatter contentType="application/x-www-form-urlencoded"
                                class="org.wso2.carbon.relay.ExpandingMessageFormatter"/>
                <messageFormatter contentType="multipart/form-data"
                                class="org.wso2.carbon.relay.ExpandingMessageFormatter"/>
                <messageFormatter contentType="multipart/related"
                                  class="org.wso2.carbon.relay.ExpandingMessageFormatter"/>
                <messageFormatter contentType="application/xml"
                                class="org.wso2.carbon.relay.ExpandingMessageFormatter"/>
                <messageFormatter contentType="text/html"
                                class="org.wso2.carbon.relay.ExpandingMessageFormatter"/>
                <messageFormatter contentType="text/plain"
                                  class="org.wso2.carbon.relay.ExpandingMessageFormatter"/>
                <messageFormatter contentType="application/soap+xml"
                                class="org.wso2.carbon.relay.ExpandingMessageFormatter"/>
                <messageFormatter contentType="text/xml"
                                class="org.wso2.carbon.relay.ExpandingMessageFormatter"/>
                <messageFormatter contentType="application/json"
                                  class="org.wso2.carbon.relay.ExpandingMessageFormatter"/>
                <messageFormatter contentType="application/json/badgerfish"
                                  class="org.wso2.carbon.relay.ExpandingMessageFormatter"/>
                <messageFormatter contentType="text/javascript"
                                  class="org.wso2.carbon.relay.ExpandingMessageFormatter"/>
                <messageFormatter contentType="application/octet-stream"
                                  class="org.wso2.carbon.relay.ExpandingMessageFormatter"/-->

              <!--messageFormatter contentType="x-application/hessian"
                                class="org.apache.synapse.format.hessian.HessianMessageFormatter"/>
                <messageFormatter contentType=""
                                class="org.apache.synapse.format.hessian.HessianMessageFormatter"/-->
            </messageFormatters>

            <!-- ================================================= -->
            <!--                Message Builders                   -->
            <!-- ================================================= -->

            <!-- Following content type to builder mapping can be used to implement support for -->
            <!-- different message formats in Axis2. These message formats are expected to be -->
            <!-- resolved based on the content type. -->
            <messageBuilders>
          <messageBuilder contentType="application/xml"
                                class="org.apache.axis2.builder.ApplicationXMLBuilder"/>
                <messageBuilder contentType="text/html"
                                class="org.wso2.carbon.relay.BinaryRelayBuilder"/>
                <messageBuilder contentType="application/x-www-form-urlencoded"
                                class="org.apache.synapse.commons.builders.XFormURLEncodedBuilder"/>
                <messageBuilder contentType="multipart/form-data"
                                class="org.apache.axis2.builder.MultipartFormDataBuilder"/>
                <messageBuilder contentType="text/plain"
                                class="org.apache.axis2.format.PlainTextBuilder"/>

                <!--JSON Message Builders-->
                <messageBuilder contentType="application/json"
                                class="org.apache.synapse.commons.json.JsonStreamBuilder"/>
                <!--messageBuilder contentType="application/json"
                                class="org.apache.synapse.commons.json.JsonBuilder"/-->
                <messageBuilder contentType="application/json/badgerfish"
                                class="org.apache.axis2.json.JSONBadgerfishOMBuilder"/>
                <messageBuilder contentType="text/javascript"
                                class="org.apache.axis2.json.JSONBuilder"/>
                <messageBuilder contentType="application/octet-stream" 
                                class="org.wso2.carbon.relay.BinaryRelayBuilder"/>

                <!--messageBuilder contentType="text/javascript"
                                class="org.apache.axis2.json.JSONStreamBuilder"/-->

                <!--See  https://wso2.org/jira/browse/ESBJAVA-1725 before enabling bellow line -->
          <!--messageBuilder contentType=".*"
                                class="org.wso2.carbon.relay.BinaryRelayBuilder"/-->

          <!--messageBuilder contentType="application/xml"
                                class="org.wso2.carbon.relay.BinaryRelayBuilder"/>
                <messageBuilder contentType="application/x-www-form-urlencoded"
                                class="org.wso2.carbon.relay.BinaryRelayBuilder"/>
                <messageBuilder contentType="multipart/form-data"
                                class="org.wso2.carbon.relay.BinaryRelayBuilder"/>
                <messageBuilder contentType="multipart/related"
                              class="org.wso2.carbon.relay.BinaryRelayBuilder"/>
                <messageBuilder contentType="application/soap+xml"
                              class="org.wso2.carbon.relay.BinaryRelayBuilder"/>
                <messageBuilder contentType="text/plain"
                              class="org.wso2.carbon.relay.BinaryRelayBuilder"/>
                <messageBuilder contentType="text/html"
                                class="org.wso2.carbon.relay.BinaryRelayBuilder"/>
                <messageBuilder contentType="text/xml"
                              class="org.wso2.carbon.relay.BinaryRelayBuilder"/>
                <messageBuilder contentType="application/json"
                                class="org.wso2.carbon.relay.BinaryRelayBuilder"/>
                <messageBuilder contentType="application/json/badgerfish"
                                class="org.wso2.carbon.relay.BinaryRelayBuilder"/>
                <messageBuilder contentType="text/javascript"
                                class="org.wso2.carbon.relay.BinaryRelayBuilder"/>
                <messageBuilder contentType="application/octet-stream"
                                class="org.wso2.carbon.relay.BinaryRelayBuilder"/-->

                <!--messageBuilder contentType="x-application/hessian"
                                class="org.apache.synapse.format.hessian.HessianMessageBuilder"/>
                <messageBuilder contentType=""
                                class="org.apache.synapse.format.hessian.HessianMessageBuilder"/-->
            </messageBuilders>

            <!-- ================================================= -->
            <!--             Transport Ins (Listeners)             -->
            <!-- ================================================= -->

            <transportReceiver name="http" class="org.apache.synapse.transport.passthru.PassThroughHttpListener">
                <parameter name="port" locked="false">8280</parameter>
                <parameter name="non-blocking" locked="false">true</parameter>
                <parameter name="proxyPort" locked="false">80</parameter>
                <parameter name="hostname" locked="false">${URL}</parameter>
                <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
                <!--parameter name="WSDLEPRPrefix" locked="false">https://apachehost:port/somepath</parameter-->
                <parameter name="httpGetProcessor" locked="false">org.wso2.carbon.mediation.transport.handlers.PassThroughNHttpGetProcessor</parameter>
                <!--<parameter name="priorityConfigFile" locked="false">location of priority configuration file</parameter>-->
            </transportReceiver>

            <!-- the non blocking http transport based on HttpCore + NIO extensions -->
            <!--transportReceiver name="http" class="org.apache.synapse.transport.nhttp.HttpCoreNIOListener">
                <parameter name="port" locked="false">8280</parameter>
                <parameter name="non-blocking" locked="false">true</parameter-->
                <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
                <!--parameter name="WSDLEPRPrefix" locked="false">https://apachehost:port/somepath</parameter-->
                <!--parameter name="httpGetProcessor" locked="false">org.wso2.carbon.transport.nhttp.api.NHttpGetProcessor</parameter-->
                <!--<parameter name="priorityConfigFile" locked="false">location of priority configuration file</parameter>
            </transportReceiver-->

          <transportReceiver name="https" class="org.apache.synapse.transport.passthru.PassThroughHttpMultiSSLListener">
                <parameter name="port" locked="false">8243</parameter>
                <parameter name="non-blocking" locked="false">true</parameter>
                <parameter name="proxyPort" locked="false">443</parameter>
                <parameter name="hostname" locked="false">${URL}</parameter>                
                <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
                <!--parameter name="WSDLEPRPrefix" locked="false">https://apachehost:port/somepath</parameter-->
              <parameter name="httpGetProcessor" locked="false">org.wso2.carbon.mediation.transport.handlers.PassThroughNHttpGetProcessor</parameter>
                <parameter name="keystore" locked="false">
                    <KeyStore>
                        <Location>repository/resources/security/wso2carbon.jks</Location>
                        <Type>JKS</Type>
                        <Password>wso2carbon</Password>
                        <KeyPassword>wso2carbon</KeyPassword>
                    </KeyStore>
                </parameter>
                <parameter name="truststore" locked="false">
                    <TrustStore>
                        <Location>repository/resources/security/client-truststore.jks</Location>
                        <Type>JKS</Type>
                        <Password>wso2carbon</Password>
                    </TrustStore>
                </parameter>
              <!-- ============================================== -->
              <!-- Configuration for Listener Dynamic SSL Profile loading. -->
              <!-- Configured for 10 mins. -->
              <!-- ============================================== -->
              <parameter name="dynamicSSLProfilesConfig">
                  <filePath>repository/resources/security/listenerprofiles.xml</filePath>
                  <fileReadInterval>600000</fileReadInterval>
              </parameter>
              <parameter name="SSLVerifyClient">optional</parameter>
                <!--<parameter name="SSLVerifyClient">require</parameter>
                    supports optional|require or defaults to none -->
            </transportReceiver>

            <!-- the non blocking https transport based on HttpCore + SSL-NIO extensions -->
            <!--transportReceiver name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLListener">
                <parameter name="port" locked="false">8243</parameter>
                <parameter name="non-blocking" locked="false">true</parameter-->
                <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
                <!--parameter name="WSDLEPRPrefix" locked="false">https://apachehost:port/somepath</parameter-->
                <!--<parameter name="priorityConfigFile" locked="false">location of priority configuration file</parameter>-->
                <!--parameter name="httpGetProcessor" locked="false">org.wso2.carbon.transport.nhttp.api.NHttpGetProcessor</parameter>
                <parameter name="keystore" locked="false">
                    <KeyStore>
                        <Location>repository/resources/security/wso2carbon.jks</Location>
                        <Type>JKS</Type>
                        <Password>wso2carbon</Password>
                        <KeyPassword>wso2carbon</KeyPassword>
                    </KeyStore>
                </parameter>
                <parameter name="truststore" locked="false">
                    <TrustStore>
                        <Location>repository/resources/security/client-truststore.jks</Location>
                        <Type>JKS</Type>
                        <Password>wso2carbon</Password>
                    </TrustStore>
                </parameter-->
                <!--<parameter name="SSLVerifyClient">require</parameter>
                    supports optional|require or defaults to none -->
            <!--/transportReceiver-->

            <transportReceiver name="local" class="org.wso2.carbon.core.transports.local.CarbonLocalTransportReceiver"/>
            <!-- Pass-through HTTP Transport Receivers -->
            <!--<transportReceiver name="passthru-http" class="org.wso2.carbon.transport.passthru.PassThroughHttpListener">
                <parameter name="port">8281</parameter>
                <parameter name="non-blocking">true</parameter>-->
                <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
                <!--parameter name="WSDLEPRPrefix" locked="false">https://apachehost:port/somepath</parameter-->
            <!--</transportReceiver>-->

            <!--<transportReceiver name="passthru-https" class="org.wso2.carbon.transport.passthru.PassThroughHttpSSLListener">
                <parameter name="port" locked="false">8244</parameter>
                <parameter name="non-blocking" locked="false">true</parameter>-->
                <!--parameter name="bind-address" locked="false">hostname or IP address</parameter-->
                <!--parameter name="WSDLEPRPrefix" locked="false">https://apachehost:port/somepath</parameter-->
                <!--<parameter name="keystore" locked="false">
                    <KeyStore>
                        <Location>repository/resources/security/wso2carbon.jks</Location>
                        <Type>JKS</Type>
                        <Password>wso2carbon</Password>
                        <KeyPassword>wso2carbon</KeyPassword>
                    </KeyStore>
                </parameter>
                <parameter name="truststore" locked="false">
                    <TrustStore>
                        <Location>repository/resources/security/client-truststore.jks</Location>
                        <Type>JKS</Type>
                        <Password>wso2carbon</Password>
                    </TrustStore>
                </parameter>-->
                <!--<parameter name="SSLVerifyClient">require</parameter>
                    supports optional|require or defaults to none -->
            <!--</transportReceiver>-->

            <!--<transportReceiver name="vfs" class="org.apache.synapse.transport.vfs.VFSTransportListener"/>-->

            <!--<transportReceiver name="mailto" class="org.apache.axis2.transport.mail.MailTransportListener">-->
                <!-- configure any optional POP3/IMAP properties
                check com.sun.mail.pop3 and com.sun.mail.imap package documentation for more details-->
            <!--</transportReceiver>-->

            <!--<transportReceiver name="admin/https" class="org.wso2.esb.transport.tomcat.HttpsTransportListener">-->
                <!--<parameter name="port" locked="false">9444</parameter>-->
                <!--<parameter name="non-blocking" locked="false">true</parameter>-->
            <!--</transportReceiver>-->

            <!--Uncomment this and configure as appropriate for JMS transport support, after setting up your JMS environment (e.g. ActiveMQ)
            <transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener">
                <parameter name="myTopicConnectionFactory" locked="false">
                  <parameter name="java.naming.factory.initial" locked="false">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
                  <parameter name="java.naming.provider.url" locked="false">tcp://localhost:61616</parameter>
                  <parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false">TopicConnectionFactory</parameter>
                <parameter name="transport.jms.ConnectionFactoryType" locked="false">topic</parameter>
                </parameter>

                <parameter name="myQueueConnectionFactory" locked="false">
                  <parameter name="java.naming.factory.initial" locked="false">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
                  <parameter name="java.naming.provider.url" locked="false">tcp://localhost:61616</parameter>
                  <parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false">QueueConnectionFactory</parameter>
                <parameter name="transport.jms.ConnectionFactoryType" locked="false">queue</parameter>
                </parameter>

                <parameter name="default" locked="false">
                  <parameter name="java.naming.factory.initial" locked="false">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
                  <parameter name="java.naming.provider.url" locked="false">tcp://localhost:61616</parameter>
                  <parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false">QueueConnectionFactory</parameter>
                <parameter name="transport.jms.ConnectionFactoryType" locked="false">queue</parameter>
                </parameter>
            </transportReceiver>-->

            <!--Uncomment this and configure as appropriate for JMS transport support with Apache Qpid -->
            <!--transportReceiver name="jms" class="org.apache.axis2.transport.jms.JMSListener">
                <parameter name="myTopicConnectionFactory" locked="false">
                    <parameter name="java.naming.factory.initial" locked="false">org.apache.qpid.jndi.PropertiesFileInitialContextFactory</parameter>
                    <parameter name="java.naming.provider.url" locked="false">repository/conf/jndi.properties</parameter>
                    <parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false">TopicConnectionFactory</parameter>
                    <parameter name="transport.jms.ConnectionFactoryType" locked="false">topic</parameter>
                </parameter>

                <parameter name="myQueueConnectionFactory" locked="false">
                    <parameter name="java.naming.factory.initial" locked="false">org.apache.qpid.jndi.PropertiesFileInitialContextFactory</parameter>
                    <parameter name="java.naming.provider.url" locked="false">repository/conf/jndi.properties</parameter>
                    <parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false">QueueConnectionFactory</parameter>
                    <parameter name="transport.jms.ConnectionFactoryType" locked="false">queue</parameter>
                </parameter>

                <parameter name="default" locked="false">
                    <parameter name="java.naming.factory.initial" locked="false">org.apache.qpid.jndi.PropertiesFileInitialContextFactory</parameter>
                    <parameter name="java.naming.provider.url" locked="false">repository/conf/jndi.properties</parameter>
                    <parameter name="transport.jms.ConnectionFactoryJNDIName" locked="false">QueueConnectionFactory</parameter>
                    <parameter name="transport.jms.ConnectionFactoryType" locked="false">queue</parameter>
                </parameter>
            </transportReceiver-->

            <!--Uncomment this for FIX transport support
            <transportReceiver name="fix" class="org.apache.synapse.transport.fix.FIXTransportListener"/>
            -->

            <!--<transportReceiver name="http"-->
                              <!--class="org.wso2.carbon.core.transports.http.HttpTransportListener">-->
                <!--
                  Uncomment the following if you are deploying this within an application server. You
                  need to specify the HTTP port of the application server
                -->
                <!--<parameter name="port">9763</parameter>-->

                <!--
              Uncomment the following to enable Apache2 mod_proxy. The port on the Apache server is 80
              in this case.
                -->
                <!--<parameter name="proxyPort">80</parameter>-->
            <!--</transportReceiver>-->

            <!--<transportReceiver name="https"-->
                              <!--class="org.wso2.carbon.core.transports.http.HttpsTransportListener">-->
                <!--
                  Uncomment the following if you are deploying this within an application server. You
                  need to specify the HTTPS port of the application server
                -->
                <!--<parameter name="port">9443</parameter>-->

                <!--
              Uncomment the following to enable Apache2 mod_proxy. The port on the Apache server is 443
              in this case.
                -->
                <!--<parameter name="proxyPort">443</parameter>-->
            <!--</transportReceiver>-->

            <!-- ================================================= -->
            <!--             Transport Outs (Senders)              -->
            <!-- ================================================= -->

            <transportSender name="http" class="org.apache.synapse.transport.passthru.PassThroughHttpSender">
                <parameter name="non-blocking" locked="false">true</parameter>
            </transportSender>

            <!-- the non-blocking http transport based on HttpCore + NIO extensions -->
            <!--transportSender name="http" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSender">
                <parameter name="non-blocking" locked="false">true</parameter>
            </transportSender>
            <transportSender name="https" class="org.apache.synapse.transport.nhttp.HttpCoreNIOSSLSender">
                <parameter name="non-blocking" locked="false">true</parameter>
                <parameter name="keystore" locked="false">
                    <KeyStore>
                        <Location>repository/resources/security/wso2carbon.jks</Location>
                        <Type>JKS</Type>
                        <Password>wso2carbon</Password>
                        <KeyPassword>wso2carbon</KeyPassword>
                    </KeyStore>
                </parameter>
                <parameter name="truststore" locked="false">
                    <TrustStore>
                        <Location>repository/resources/security/client-truststore.jks</Location>
                        <Type>JKS</Type>
                        <Password>wso2carbon</Password>
                    </TrustStore>
                </parameter-->
                <!--<parameter name="HostnameVerifier">DefaultAndLocalhost</parameter>-->
                    <!--supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->
            <!--/transportSender-->

            <!-- Transport sender for the non blocking local transport-->
            <!--transportSender name="local" class="org.apache.axis2.transport.local.NonBlockingLocalTransportSender"/-->
            <transportSender name="local" class="org.wso2.carbon.core.transports.local.CarbonLocalTransportSender"/>

            <!-- Pass-through HTTP Transport Senders -->
            <!--<transportSender name="passthru-http"  class="org.wso2.carbon.transport.passthru.PassThroughHttpSender">
                <parameter name="non-blocking" locked="false">true</parameter>
                <parameter name="warnOnHTTP500" locked="false">*</parameter>-->
                <!--parameter name="http.proxyHost" locked="false">localhost</parameter>
                <parameter name="http.proxyPort" locked="false">3128</parameter>
                <parameter name="http.nonProxyHosts" locked="false">localhost|moon|sun</parameter-->
            <!--</transportSender>-->

            <transportSender name="https" class="org.apache.synapse.transport.passthru.PassThroughHttpSSLSender">
                <parameter name="non-blocking" locked="false">true</parameter>
                <parameter name="keystore" locked="false">
                    <KeyStore>
                        <Location>repository/resources/security/wso2carbon.jks</Location>
                        <Type>JKS</Type>
                        <Password>wso2carbon</Password>
                        <KeyPassword>wso2carbon</KeyPassword>
                    </KeyStore>
                </parameter>
                <parameter name="truststore" locked="false">
                    <TrustStore>
                        <Location>repository/resources/security/client-truststore.jks</Location>
                        <Type>JKS</Type>
                        <Password>wso2carbon</Password>
                    </TrustStore>
                </parameter>
                <!-- ============================================== -->
                <!-- Configuration for Dynamic SSL Profile loading. -->
                <!-- Configured for 10 mins. -->
                <!-- ============================================== -->
                <parameter name="dynamicSSLProfilesConfig">
                    <filePath>repository/resources/security/sslprofiles.xml</filePath>
                    <fileReadInterval>600000</fileReadInterval>
                </parameter>
                <!--<parameter name="HostnameVerifier">DefaultAndLocalhost</parameter>-->
                    <!--supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->
            </transportSender>

            <!--<transportSender name="passthru-https" class="org.wso2.carbon.transport.passthru.PassThroughHttpSSLSender">
                <parameter name="non-blocking" locked="false">true</parameter>
                <parameter name="keystore" locked="false">
                    <KeyStore>
                        <Location>repository/resources/security/wso2carbon.jks</Location>
                        <Type>JKS</Type>
                        <Password>wso2carbon</Password>
                        <KeyPassword>wso2carbon</KeyPassword>
                    </KeyStore>
                </parameter>
                <parameter name="truststore" locked="false">
                    <TrustStore>
                        <Location>repository/resources/security/client-truststore.jks</Location>
                        <Type>JKS</Type>
                        <Password>wso2carbon</Password>
                    </TrustStore>
                </parameter>-->
                <!--<parameter name="HostnameVerifier">DefaultAndLocalhost</parameter>-->
                    <!--supports Strict|AllowAll|DefaultAndLocalhost or the default if none specified -->
            <!--</transportSender>-->

            <!-- uncomment this and configure to use connection pools for sending messages>
            <transportSender name="jms" class="org.apache.axis2.transport.jms.JMSSender"/-->

            <!--transportSender name="vfs" class="org.apache.synapse.transport.vfs.VFSTransportSender"/-->

            <!-- Uncomment and configure the SMTP server information
            check com.sun.mail.smtp package documentation for descriptions of properties
            <transportSender name="mailto" class="org.apache.axis2.transport.mail.MailTransportSender">
                <parameter name="mail.smtp.host">smtp.gmail.com</parameter>
                <parameter name="mail.smtp.port">587</parameter>
                <parameter name="mail.smtp.starttls.enable">true</parameter>
                <parameter name="mail.smtp.auth">true</parameter>
                <parameter name="mail.smtp.user">synapse.demo.0</parameter>
                <parameter name="mail.smtp.password">mailpassword</parameter>
                <parameter name="mail.smtp.from">synapse.demo.0@gmail.com</parameter>
            </transportSender>-->

            <!--Uncomment this for FIX transport support
            <transportSender name="fix" class="org.apache.synapse.transport.fix.FIXTransportSender"/>
            -->

            <!--<transportSender name="http"-->
                            <!--class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">-->
                <!--<parameter name="PROTOCOL">HTTP/1.1</parameter>-->
                <!--<parameter name="Transfer-Encoding">chunked</parameter>-->
                <!-- This parameter has been added to overcome problems encounted in SOAP action parameter -->
                <!--<parameter name="OmitSOAP12Action">true</parameter>-->
            <!--</transportSender>-->
            <transportSender name="ws" class="org.wso2.carbon.websocket.transport.WebsocketTransportSender">
                <parameter name="ws.outflow.dispatch.sequence" locked="false">outflowDispatchSeq</parameter>
                <parameter name="ws.outflow.dispatch.fault.sequence" locked="false">outflowFaultSeq</parameter>
            </transportSender>

            <transportSender name="wss" class="org.wso2.carbon.websocket.transport.WebsocketTransportSender">
                <parameter name="ws.outflow.dispatch.sequence" locked="false">outflowDispatchSeq</parameter>
                <parameter name="ws.outflow.dispatch.fault.sequence" locked="false">outflowFaultSeq</parameter>
                <parameter name="ws.trust.store" locked="false">
                    <ws.trust.store.location>repository/resources/security/client-truststore.jks</ws.trust.store.location>
                    <ws.trust.store.Password>wso2carbon</ws.trust.store.Password>
                </parameter>
            </transportSender>

            <!--<transportSender name="https"-->
                            <!--class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">-->
                <!--<parameter name="PROTOCOL">HTTP/1.1</parameter>-->
                <!--<parameter name="Transfer-Encoding">chunked</parameter>-->
                <!-- This parameter has been added to overcome problems encounted in SOAP action parameter -->
                <!--<parameter name="OmitSOAP12Action">true</parameter>-->
            <!--</transportSender>-->

            <!-- ================================================= -->
            <!--             Global Engaged Modules                -->
            <!-- ================================================= -->

            <!-- Comment this out to disable Addressing -->
            <module ref="addressing"/>

            <!--
            Uncomment out the following entry if SOAP (text/xml and application/soap+xml) messages
            are processed through the message relay.
            -->
            <!--module ref="relay"/-->


            <!-- ================================================= -->
            <!--                Clustering                         -->
            <!-- ================================================= -->
            <!--
            To enable clustering for this node, set the value of "enable" attribute of the "clustering"
            element to "true". The initialization of a node in the cluster is handled by the class
            corresponding to the "class" attribute of the "clustering" element. It is also responsible for
            getting this node to join the cluster.
            -->
            <clustering class="org.wso2.carbon.core.clustering.hazelcast.HazelcastClusteringAgent"
                        enable="false">

                <!--
                  This parameter indicates whether the cluster has to be automatically initalized
                  when the AxisConfiguration is built. If set to "true" the initialization will not be
                  done at that stage, and some other party will have to explictly initialize the cluster.
                -->
                <parameter name="AvoidInitiation">true</parameter>

                <!--
                  The membership scheme used in this setup. The only values supported at the moment are
                  "multicast" and "wka"

                  1. multicast - membership is automatically discovered using multicasting
                  2. wka - Well-Known Address based multicasting. Membership is discovered with the help
                            of one or more nodes running at a Well-Known Address. New members joining a
                            cluster will first connect to a well-known node, register with the well-known node
                            and get the membership list from it. When new members join, one of the well-known
                            nodes will notify the others in the group. When a member leaves the cluster or
                            is deemed to have left the cluster, it will be detected by the Group Membership
                            Service (GMS) using a TCP ping mechanism.
                -->
                <parameter name="membershipScheme">multicast</parameter>
                <!--<parameter name="licenseKey">xxx</parameter>-->
                <!--<parameter name="mgtCenterURL">http://localhost:8081/mancenter/</parameter>-->

                <!--
                The clustering domain/group. Nodes in the same group will belong to the same multicast
                domain. There will not be interference between nodes in different groups.
                -->
                <parameter name="domain">wso2.carbon.domain</parameter>

                <!-- The multicast address to be used -->
                <!--<parameter name="mcastAddress">228.0.0.4</parameter>-->

                <!-- The multicast port to be used -->
                <parameter name="mcastPort">45564</parameter>

                <parameter name="mcastTTL">100</parameter>

                <parameter name="mcastTimeout">60</parameter>

                <!--
                  The IP address of the network interface to which the multicasting has to be bound to.
                  Multicasting would be done using this interface.
                -->
                <!--
                    <parameter name="mcastBindAddress">127.0.0.1</parameter>
                -->
                <!-- The host name or IP address of this member -->

                <parameter name="localMemberHost">127.0.0.1</parameter>

                <!--
                    The bind adress of this member. The difference between localMemberHost & localMemberBindAddress
                    is that localMemberHost is the one that is advertised by this member, while localMemberBindAddress
                    is the address to which this member is bound to.
                -->
                <!--
                <parameter name="localMemberBindAddress">127.0.0.1</parameter>
                -->

                <!--
                The TCP port used by this member. This is the port through which other nodes will
                contact this member
                -->
                <parameter name="localMemberPort">4000</parameter>

                <!--
                    The bind port of this member. The difference between localMemberPort & localMemberBindPort
                    is that localMemberPort is the one that is advertised by this member, while localMemberBindPort
                    is the port to which this member is bound to.
                -->
                <!--
                <parameter name="localMemberBindPort">4001</parameter>
                -->

                <!--
                Properties specific to this member
                -->
                <parameter name="properties">
                    <property name="backendServerURL" value="https://${hostName}:${httpsPort}/services/"/>
                    <property name="mgtConsoleURL" value="https://${hostName}:${httpsPort}/"/>
                    <property name="subDomain" value="worker"/>
                </parameter>

                <!--
                  The list of static or well-known members. These entries will only be valid if the
                  "membershipScheme" above is set to "wka"
                -->
                <members>
                    <member>
                        <hostName>127.0.0.1</hostName>
                        <port>4000</port>
                    </member>
                </members>

                <!--
                Enable the groupManagement entry if you need to run this node as a cluster manager.
                Multiple application domains with different GroupManagementAgent implementations
                can be defined in this section.
                -->
                <groupManagement enable="false">
                    <applicationDomain name="wso2.apim.domain"
                                      description="APIM group"
                                      agent="org.wso2.carbon.core.clustering.hazelcast.HazelcastGroupManagementAgent"
                                      subDomain="worker"
                                      port="2222"/>
                </groupManagement>
            </clustering>

            <!-- ================================================= -->
            <!--                   Transactions                    -->
            <!-- ================================================= -->

            <!--
                Uncomment and configure the following section to enable transactions support
            -->
            <!--<transaction timeout="30000">
                <parameter name="java.naming.factory.initial">org.apache.activemq.jndi.ActiveMQInitialContextFactory</parameter>
                <parameter name="java.naming.provider.url">tcp://localhost:61616</parameter>
                <parameter name="UserTransactionJNDIName">UserTransaction</parameter>
                <parameter name="TransactionManagerJNDIName">TransactionManager</parameter>
            </transaction>-->

            <!-- ================================================= -->
            <!--                    Phases                         -->
            <!-- ================================================= -->

            <phaseOrder type="InFlow">
                <!--  System pre defined phases       -->
                <!--
                  The MsgInObservation phase is used to observe messages as soon as they are
                  received. In this phase, we could do some things such as SOAP message tracing & keeping
                  track of the time at which a particular message was received

                  NOTE: This should be the very first phase in this flow
                -->
          <phase name="MsgInObservation">
            <handler name="TraceMessageBuilderDispatchHandler"
                          class="org.apache.synapse.transport.passthru.util.TraceMessageBuilderDispatchHandler"/>
          </phase>
          <phase name="Validation"/>
                <phase name="Transport">
                    <!--TEMPORALY-->
                    <!--handler name="TenantActiveCheckDispatcher"
                            class="org.wso2.carbon.tenant.dispatcher.TenantActiveCheckDispatcher">
                        <order phase="Transport"/>
                    </handler-->
                    <handler name="RequestURIBasedDispatcher"
                            class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
                        <order phase="Transport"/>
                    </handler>
              <handler name="CarbonContextConfigurator"
            class="org.wso2.carbon.mediation.initializer.handler.CarbonContextConfigurator"/>
                    <handler name="SOAPActionBasedDispatcher"
                            class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
                        <order phase="Transport"/>
                    </handler>
                    <!--handler name="SMTPFaultHandler"
                            class="org.wso2.carbon.core.transports.smtp.SMTPFaultHandler">
                        <order phase="Transport"/>
                    </handler-->
                    <!-- TEMPORALY-->
                    <!--handler name="CacheMessageBuilderDispatchandler"
                            class="org.wso2.carbon.mediation.initializer.handler.CacheMessageBuilderDispatchandler"/-->
                    <handler name="CarbonContentConfigurator"
                            class="org.wso2.carbon.mediation.initializer.handler.CarbonContextConfigurator"/>
                </phase>
                <phase name="Addressing">
                    <handler name="AddressingBasedDispatcher"
                            class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
                        <order phase="Addressing"/>
                    </handler>

                </phase>
                <phase name="Security"/>
                <phase name="PreDispatch"/>
                <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
                    <handler name="RequestURIBasedDispatcher"
                            class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
                    <handler name="SOAPActionBasedDispatcher"
                            class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
                    <handler name="RequestURIOperationDispatcher"
                            class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
                    <handler name="SOAPMessageBodyBasedDispatcher"
                            class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>

              <handler name="HTTPLocationBasedDispatcher"
                            class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
                    <handler name="MultitenantDispatcher"
                            class="org.wso2.carbon.tenant.dispatcher.MultitenantDispatcher"/>
                    <handler name="SynapseDispatcher"
                            class="org.apache.synapse.core.axis2.SynapseDispatcher"/>
                    <handler name="SynapseMustUnderstandHandler"
                            class="org.apache.synapse.core.axis2.SynapseMustUnderstandHandler"/>
                </phase>
                <!--  System pre defined phases       -->
                <phase name="RMPhase"/>
                <phase name="OpPhase"/>
                <phase name="AuthPhase"/>
                <phase name="MUPhase"/>
                <!-- After Postdispatch phase module author or or service author can add any phase he want -->
                <phase name="OperationInPhase"/>
            </phaseOrder>

            <phaseOrder type="OutFlow">
                <!-- Handlers related to unified-endpoint component are added to the UEPPhase -->
                <phase name="UEPPhase" />
                <!--      user can add his own phases to this area  -->
                <phase name="RMPhase"/>
                <phase name="MUPhase"/>
                <phase name="OpPhase"/>
                <phase name="OperationOutPhase"/>
                <!--system predefined phase-->
                <!--these phase will run irrespective of the service-->
                <phase name="PolicyDetermination"/>
            <!--security handler for pass through -->
            <phase name="PTSecurityOutPhase">
              <handler name="RelaySecuirtyMessageBuilderDispatchandler"
                            class="org.apache.synapse.transport.passthru.util.RelaySecuirtyMessageBuilderDispatchandler"/>
                </phase>
                <phase name="MessageOut"/>
                <phase name="Security"/>

                <!--
                  The MsgOutObservation phase is used tju,o observe messages just before the
                  responses are sent out. In this phase, we could do some things such as SOAP message
                  tracing & keeping track of the time at which a particular response was sent.

                  NOTE: This should be the very last phase in this flow
                -->
                <phase name="MsgOutObservation"/>
            </phaseOrder>

            <phaseOrder type="InFaultFlow">
                <!--
                  The MsgInObservation phase is used to observe messages as soon as they are
                  received. In this phase, we could do some things such as SOAP message tracing & keeping
                  track of the time at which a particular message was received

                  NOTE: This should be the very first phase in this flow
                -->
                <phase name="MsgInObservation"/>
          <phase name="Validation"/>

                <phase name="Transport">
                    <handler name="RequestURIBasedDispatcher"
                            class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
                        <order phase="Transport"/>
                    </handler>
                    <handler name="SOAPActionBasedDispatcher"
                            class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
                        <order phase="Transport"/>
                    </handler>
              <handler name="CarbonContentConfigurator"
                    class="org.wso2.carbon.mediation.initializer.handler.CarbonContextConfigurator"/>
                  </phase>

                  <phase name="Addressing">
                    <handler name="AddressingBasedDispatcher"
                            class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
                        <order phase="Addressing"/>
                    </handler>
                  </phase>

                <phase name="Security"/>
                <phase name="PreDispatch"/>
                <phase name="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
                    <handler name="RequestURIBasedDispatcher"
                            class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
                    <handler name="SOAPActionBasedDispatcher"
                            class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
                    <handler name="RequestURIOperationDispatcher"
                            class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
                    <handler name="SOAPMessageBodyBasedDispatcher"
                            class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>

                    <handler name="HTTPLocationBasedDispatcher"
                            class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
                </phase>
                <!--      user can add his own phases to this area  -->
                <phase name="RMPhase"/>
                <phase name="OpPhase"/>
                <phase name="MUPhase"/>
                <phase name="OperationInFaultPhase"/>
            </phaseOrder>

            <phaseOrder type="OutFaultFlow">
                <!-- Handlers related to unified-endpoint component are added to the UEPPhase -->
                <phase name="UEPPhase" />
                <!--      user can add his own phases to this area  -->
                <phase name="RMPhase"/>
                <!-- Must Understand Header processing phase -->
                <phase name="MUPhase"/>
                <phase name="OperationOutFaultPhase"/>
                <phase name="PolicyDetermination"/>
                <phase name="MessageOut"/>
                <phase name="Security"/>
          <phase name="Transport"/>
                <!--
                  The MsgOutObservation phase is used to observe messages just before the
                  responses are sent out. In this phase, we could do some things such as SOAP message
                  tracing & keeping track of the time at which a particular response was sent.

                  NOTE: This should be the very last phase in this flow
                -->
                <phase name="MsgOutObservation"/>
            </phaseOrder>
        </axisconfig>

    kind: ConfigMap
    metadata:
      name: wso2am-config




  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: wso2-api-gateway
      name: wso2am
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: wso2-api-gateway
        deploymentconfig: wso2am
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: wso2-api-gateway
            deploymentconfig: wso2am
        spec:
          containers:
            - env:
                - name: WAITFOR_HOST
                  value: mysql
                - name: WAITFOR_PORT
                  value: '3306'
              image: "wso2am:latest"
              imagePullPolicy: Always
              name: wso2am
              ports:
                - containerPort: 8280
                  protocol: TCP
                - containerPort: 9763
                  protocol: TCP
                - containerPort: 9443
                  protocol: TCP
                - containerPort: 8243
                  protocol: TCP                  
                - containerPort: 9673
                  protocol: TCP
                - containerPort: 5672
                  protocol: TCP
                - containerPort: 7611
                  protocol: TCP
                - containerPort: 7711
                  protocol: TCP                                                    
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 120
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8280
                  path: /
                timeoutSeconds: 15
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 120
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8280
                  path: /
                timeoutSeconds: 15
              resources:
                limits:
                  cpu: 2000m
                  memory: 2048Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - name: wso2am-config
                  mountPath: /opt/custom_config                 
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          volumes:
            - configMap:
                name: wso2am-config
              name: wso2am-config             
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - wso2am
            from:
              kind: ImageStreamTag
              name: "wso2am:latest"
          type: ImageChange



  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: wso2-api-gateway
        build: wso2am
      name: wso2am
    spec:
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: 'wso2am:latest'
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        contextDir: wso2am
        git:
          ref: master
          uri: 'https://github.com/mvilche/wso2-api-gateway-openshift.git'
        type: Git
      strategy:
        dockerStrategy:
          dockerfilePath: Dockerfile
        type: Docker
      successfulBuildsHistoryLimit: 5
      triggers:
        - type: ConfigChange




  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: wso2-api-gateway
      name: wso2am
    spec:
      ports:
        - name: gateway-manager
          port: 9763
          protocol: TCP
          targetPort: 9763
        - name: gateway-manager-secure
          port: 9443
          protocol: TCP
          targetPort: 9443
        - name: gateway-worker
          port: 8280
          protocol: TCP
          targetPort: 8280
        - name: gateway-worker-secure
          port: 8243
          protocol: TCP
          targetPort: 8243
        - name: api-publish
          port: 9673
          protocol: TCP
          targetPort: 9673
        - name: traffic-manager-1
          port: 5672
          protocol: TCP
          targetPort: 5672
        - name: traffic-manager-2
          port: 7611
          protocol: TCP
          targetPort: 7611
        - name: traffic-manager-3
          port: 7711
          protocol: TCP
          targetPort: 7711                          
      selector:
        app: wso2-api-gateway
        deploymentconfig: wso2am
      sessionAffinity: None
      type: ClusterIP
      
      
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: wso2-api-gateway
      name: wso2am
    spec:
      host: ${URL}
      port:
        targetPort: gateway-manager-secure
      tls:
        termination: passthrough
      to:
        kind: Service
        name: wso2am
        weight: 100
      wildcardPolicy: None

    

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: wso2-api-gateway
      name: wso2am
    spec: {}


########## FIN gateway

### inicio mysql
### COMIENZO mysql
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: wso2-api-gateway
      name: mysql
    spec:
      replicas: 1
      selector:
        app: wso2-api-gateway
        deploymentconfig: mysql
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        type: Recreate
      template:
        metadata:
          labels:
            app: wso2-api-gateway
            deploymentconfig: mysql
        spec:
          containers:
            - env:
                - name: MYSQL_ROOT_PASSWORD
                  value: wso2
                - name: MYSQL_USER
                  value: wso2
                - name: MYSQL_PASSWORD
                  value: wso2                  
                - name: MYSQL_DATABASE
                  value: wso2
              image: mysql:57
              imagePullPolicy: Always
              name: mysql
              ports:
                - containerPort: 3306
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                  - /bin/sh
                  - -i
                  - -c
                  - mysql -h 127.0.0.1 -u $MYSQL_USER -p$MYSQL_PASSWORD -D $MYSQL_DATABASE -e 'SELECT 1'
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              resources:
                limits:
                  memory: 512Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /var/lib/mysql/data
                  name: mysql
                  subPath: mysql
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - name: mysql
              persistentVolumeClaim:
                claimName: wso2-api-gateway-data
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - mysql
            from:
              kind: ImageStreamTag
              name: 'mysql:57'
          type: ImageChange



  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: wso2-api-gateway
      name: mysql
    spec:
      ports:
        - name: tcp
          port: 3306
          protocol: TCP
          targetPort: 3306
      selector:
        app: wso2-api-gateway
        deploymentconfig: mysql
      sessionAffinity: None
      type: ClusterIP



  - apiVersion: v1
    kind: ImageStream
    metadata:
        name: mysql
    spec:
        tags:
          - name: '57'
            from:
                kind: DockerImage
                name: centos/mysql-57-centos7

## fin mysql

  ################PARAMETROS
  parameters:
    - name: URL
      displayName: Dominio de acceso. Se crea route con el nombre ingresado
      value: ''
      required: true

